Action {
  Element
    = NormalElement -- normal
    | VoidElement   -- void

  // Normal Element
  NormalElement = StartTag Content* EndTag
  StartTag = "<" ElementName Attribute* ">"
  EndTag = "</" ElementName ">"

  // Void Element
  VoidElement = "<" ElementName Attribute* "/>"

  Attribute = AttributeName "=" Expr

  Content
    = Interpolation -- interpolation
    | Text          -- text
    | Element       -- element
  Text = (~"<" ~">" ~"{{" ~"}}" any)+
  Interpolation = "{{" Expr "}}"
  ElementName
    = ActionNameMaybeAlias -- action
    | name                 -- html
  AttributeName
    = output -- output
    | name   -- name
  ActionNameMaybeAlias = actionName Alias?
  Alias = "as" name
  actionName = name "." name

  comment = multiLineComment
  eol = "\r"?"\n"
  multiLineComment = "<!--" (~"-->" any)* "-->"

  // Exprs
  Expr
    = UnExpr       -- un
    | BinExpr      -- bin
    | TerExpr      -- ter
    | PropExpr     -- prop
    | Literal      -- literal
    | input        -- input
    | Element      -- element
    | "(" Expr ")" -- parens

  UnExpr
    = "!" Expr -- not

  BinExpr
    = Expr "+" Expr    -- plus
    | Expr "-" Expr    -- minus
    | Expr "*" Expr    -- mul
    // Angular's template syntax doesn't support exp
    // | Expr "**" Expr   -- exp
    | Expr "/" Expr    -- div
    | Expr "%" Expr    -- mod
    // Relational Expr
    | Expr "lt" Expr   -- lt
    | Expr "gt" Expr   -- gt
    | Expr "lt=" Expr  -- le
    | Expr "gt=" Expr  -- ge
    // Equality Expr
    | Expr "===" Expr  -- eq
    | Expr "!==" Expr  -- neq
    // Logical Expr
    | Expr "&&" Expr   -- and
    | Expr "||" Expr   -- or

  TerExpr = Expr "?" Expr ":" Expr

  PropExpr
    // in an expression, a `name` can only appear as a reference to an output
    = Expr "[" Expr "]"          -- dynamic
    | Expr nav name              -- static
    | (name | input) (nav name)+ -- io

  Literal
    = decimalLiteral            -- number
    | stringLiteral             -- text
    | "true"                    -- true
    | "false"                   -- false
    | ObjectLiteral             -- obj
    | "[" ListOf<Expr, ","> "]" -- array

  ObjectLiteral
    = "{" ListOf<PropAssignment, ","> "}"             -- noTrailingComma
    | "{" NonemptyListOf<PropAssignment, ","> "," "}" -- trailingComma

  decimalLiteral
    = signedInt "." decimalDigit* exponentPart -- bothParts
    |           "." decimalDigit+ exponentPart -- decimalsOnly
    | signedInt                   exponentPart -- integerOnly

  signedInt
    = "+" decimalIntLiteral* -- positive
    | "-" decimalIntLiteral* -- negative
    | decimalIntLiteral+     -- noSign
  decimalIntLiteral
    = nonZeroDigit decimalDigit*  -- nonZero
    | "0"                         -- zero
  decimalDigit = "0".."9"
  nonZeroDigit = "1".."9"

  exponentPart
    = exponentIndicator signedInt -- present
    |                             -- absent
  exponentIndicator = "e" | "E"

  stringLiteral
    = "\"" doubleStringChar* "\"" -- doubleQuote
    | "'" singleStringChar* "'"   -- singleQuote
  doubleStringChar = ~("\"") any
  singleStringChar = ~("'") any

  PropAssignment = Prop ":" Expr

  Prop
    = name            -- noQuote
    | stringLiteral   -- withQuotes

  number = "-"? digit+
  name = letter (alnum | "-" | "_")*
  input = "$" name
  output = name "$"

  nav = "." | "?."
  space := whitespace | lineTerminator | comment
  whitespace
    = "\t"
    | "\x0B"    -- verticalTab
    | "\x0C"    -- formFeed
    | " "
    | "\u00A0"  -- noBreakSpace
    | "\uFEFF"  -- byteOrderMark
    | unicodeSpaceSeparator
  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"

  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
}
