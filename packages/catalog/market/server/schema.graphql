enum TRANSACTION_STATUS {
  PAID
  UNPAID
  CANCELED
}

type Market {
  id: ID!
}

type Party {
  id: ID!
  balance: Float
}

type Good {
  id: ID!
  name: String
  price: Float
  seller: Party
  supply: Float
  market: Market
}

type Transaction {
  id: ID!
  good: Good
  buyer: Party
  seller: Party
  pricePerGood: Float
  quantity: Float
  market: Market
  status: TRANSACTION_STATUS
}

type CompoundTransaction {
  id: ID!
  transactions: [Transaction]
  totalPrice: Float
}

input CreatePartyInput {
  id: ID
  balance: Float
}

input AddAmountInput {
  partyId: ID
  amount: Float
}

input CreateGoodInput {
  id: ID
  name: String
  price: Float
  supply: Float
  sellerId: String
  marketId: String
}

input UpdateGoodInput {
  id: ID
  name: String
  price: Float
  supply: Float
  sellerId: String
}

input GoodsInput {
  buyerId: ID
  sellerId: ID
  marketId: ID
  affordable: Boolean,
  available: Boolean
}

input CreateTransactionInput {
  id: ID
  goodId: ID
  buyerId: ID
  quantity: Float
  priceFraction: Float
  paid: Boolean
}

type Query {
  party(id: ID!): Party
  good(id: ID!): Good
  market(id: ID!): Market
  transaction(id: ID!): Transaction
  compoundtransaction(id: ID!): CompoundTransaction

  goods(input: GoodsInput!): [Good]
  marketTransactions(marketId: ID!): [Transaction]
  buyerTransactions(buyerId: ID!, marketId: ID!): [Transaction]
}

type Mutation {
  createMarket(id: ID!): Market
  createParty(input: CreatePartyInput!): Party
  addAmount(input: AddAmountInput!): Boolean
  createGood(input: CreateGoodInput!): Good
  updateGood(input: UpdateGoodInput!): Boolean
  createTransaction(input: CreateTransactionInput!): Transaction
}
