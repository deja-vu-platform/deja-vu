enum TRANSACTION_STATUS {
  PAID
  UNPAID
  CANCELED
}

type Market {
  id: ID!
}

type Party {
  id: ID!
  balance: Float
}

type Good {
  id: ID!
  name: String
  price: Float
  seller: Party
  supply: Float
  market: Market
}

type Transaction {
  id: ID!
  good: Good
  buyer: Party
  seller: Party
  price: Float
  quantity: Float
  market: Market
  status: TRANSACTION_STATUS
}

type CompoundTransaction {
  id: ID!
  transactions: [Transaction]
  totalPrice: Float
}

type CreateUnpaidTransactionInput {
  id: String
  goodId: String
  buyerId: String
  quantity: Float
  price: Float
}

type CreateAndAddUnpaidTransactionInput {
  compopundTransactionId: String
  createTransactionInput: CreateUnpaidTransactionInput
}

input CreatePartyInput {
  id: ID
  balance: Float
}

input AddAmountInput {
  partyId: ID
  amount: Float
}

input CreateGoodInput {
  id: ID
  name: String
  price: Float
  supply: Float
  sellerId: String
  marketId: String
}

type Query {
  party(id: ID!): Party
  good(id: ID!): Good
  market(id: ID!): Market
  transaction(id: ID!): Transaction
  compoundtransaction(id: ID!): CompoundTransaction
  affordableGoods(marketId: ID!, buyerId: ID!): [Good]
  unaffordableGoods(marketId: ID!, buyerId: ID!): [Good]
  goodsInMarket(marketId: ID!): [Good]
  goodsFromSeller(marketId: ID!, sellerId: ID!): [Good]
  marketTransactions(marketId: ID!): [Transaction]
  buyerTransactions(buyerId: ID!, marketId: ID!): [Transaction]
}

type Mutation {
  createMarket(id: ID!): Market
  createParty(input: CreatePartyInput!): Party
  addAmount(input: AddAmountInput!): Boolean
  createGood(input: CreateGoodInput!): Good
  updateGood(id: ID!, name: String, price: Float, sellerId: ID,supply: Float)
    : Boolean
}
