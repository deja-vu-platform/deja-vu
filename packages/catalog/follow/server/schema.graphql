type Follower {
  id: ID!,
  follows: [Publisher]
}

type Publisher {
  id: ID!,
  messages: [Message]
}

type Message {
  id: ID!,
  publisher: Publisher!,
  content: String!
}

input CreateMessageInput {
  id: ID,
  publisherId: ID!,
  content: String!
}

# Show messages by a publisher (publisherId) OR
# Show messages of publishers followed by a follower (followerId) OR
# Show all messages
input MessagesInput {
  followerId: ID,
  publisherId: ID
}

input EditFollowerInput {
  oldId: ID!,
  newId: ID!
}

input EditPublisherInput {
  oldId: ID!,
  newId: ID!
}

input EditMessageInput {
  id: ID!,
  publisher: Publisher!,
  content: String!
}

input FollowUnfollowInput {
  followerId: ID!,
  publisherId: ID!
}

type Query {
  follower(id: ID!): Follower
  followers(publisherId: ID): [Follower]
  publisher(id: ID!): Publisher
  publishers(followerId: ID): [Publisher]
  message(id: ID!): Message
  messages(input: MessagesInput!): [Message]
}

type Mutation {
  createFollower(id: ID): Follower
  createPublisher(id: ID): Publisher
  createMessage(input: CreateMessageInput!): Message
  editFollower(input: EditFollowerInput!): Boolean
  editPublisher(input: EditPublisherInput!): Boolean
  editMessage(input: EditMessageInput!): Boolean
  follow(input: FollowUnfollowInput!): Boolean
  unfollow(input: FollowUnfollowInput!): Boolean
}
