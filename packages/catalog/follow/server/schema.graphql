type Publisher {
  id: ID!
  messages: [Message]
  followerIds: [String]
}

type Message {
  id: ID!
  content: String!
}

input CreateMessageInput {
  id: ID
  publisherId: ID!
  content: String!
}

input FollowersInput {
  ofPublisherId: ID
}

input PublishersInput {
  followedById: ID
}

input MessagesInput {
  ofPublishersFollowedById: ID
  byPublisherId: ID
}

input EditMessageInput {
  id: ID!
  publisherId: ID!
  content: String!
}

input FollowUnfollowInput {
  followerId: ID!
  publisherId: ID!
}

type Query {
  followers(input: FollowersInput!): [ID]
  followerCount(input: FollowersInput): Int
  publisher(id: ID!): Publisher
  publishers(input: PublishersInput): [Publisher]
  publisherCount(input: PublishersInput): Int
  message(id: ID!): Message
  messages(input: MessagesInput!): [Message]
  messageCount(input: MessagesInput): Int
  isFollowing(input: FollowUnfollowInput!): Boolean
}

type Mutation {
  createPublisher(id: ID): Publisher
  createMessage(input: CreateMessageInput!): Message
  editMessage(input: EditMessageInput!): Boolean
  follow(input: FollowUnfollowInput!): Boolean
  unfollow(input: FollowUnfollowInput!): Boolean
}
