# While this is the chat cliché,
# it only keeps track of the messages within chats
# and not as chat objects.
# Chats are referenced through the field chatId and
# typically, the participants of a chat
# can be represented by the group cliché,
# so chatId points to the id of the group that contains the participants
type Message {
  id: ID!
  content: String!
  timestamp: int!
  authorId: ID!
  chatId: ID!
}

input CreateMessageInput {
  id: ID
  content: String!
  authorId: ID!
  chatId: ID!
}

input UpdateMessageInput {
  id: ID!
  content: String!
}

input MessagesByChatInput {
  chatIds: [ID!]
  maxMessageCountPerChat: Int
}

type Query {
  # Get all the messages after lastMessageId (in terms of timestamp)
  # that belong to chatId in descending timestamp order
  chatMessages(chatId: ID!, lastMessageId: ID): [Message!]

  # Get the last input.maxMessageCountPerChat messages that belong
  # to each of the provided input.chatIds,
  # with the groups of messages in the same order as the chat ids
  # and with the messages in each group in descending timestamp order
  messagesByChat(input: MessagesByChatInput!): [[Message!]]
}

type Mutation {
  createMessage(input: CreateMessageInput!): Message
  deleteMessage(id: ID!): Boolean
  updateMessage(input: UpdateMessageInput!): Boolean
}

type Subscription {
  newChatMessage(chatId: ID!): ID!
}
