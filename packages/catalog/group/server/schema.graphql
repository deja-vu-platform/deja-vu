type Group {
  id: ID!
  members: [Member]
  subgroups: [Group]
}

type Member {
  id: ID!
}

type Query {
  group(id: ID!): Group
  member(id: ID!): Member
  # get all members directly or indirectly in a group
  allMembers(id: ID!): [Member]
  # get all subgroups directly or indirectly in a group
  allSubgroups(id: ID!): [Group]
  # get all groups directly containing a member
  groupsByDirectMember(id: ID!): [Group]
  # get all groups directly containing a subgroup
  groupsByDirectSubgroup(id: ID!): [Group]

  # get all groups directly or indirectly containing a member
  groupsByMember(id: ID!): [Group]
  # get all groups directly or indirectly containing a subgroup 
  groupsBySubgroup(id: ID!): [Group]
}

type Mutation {
  createGroup(
      id: ID, initialMemberIds: [Member!], initialSubgroupIds: [Group!]): Group 
  createMember(id: ID): Member 

  addMember(groupId: ID!, memberId: ID!): Group
  removeMember(groupId: ID!, memberId: ID!): Group

  addSubgroup(groupId: ID!, subgroupId: ID!): Group
  removeSubgroup(groupId: ID!, subgroupId: ID!): Group
}
