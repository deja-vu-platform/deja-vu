type Event {
  id: ID!,
  startDate: String!,
  endDate: String!,
  weeklyEvent?: WeeklyEvent
}

type WeeklyEvent {
  id: ID!,
  startsOn: String!,
  endsOn: String!,
  events: [Event!]!
}

type CreateEventInput {
  id: ID!,
  startsOn: String!,
  endsOn: String!,
  startTime: String!,
  endTime: String!
}

type UpdateEventInput {
  id: ID!,
  startsOn: String,
  endsOn: String,
  startTime: String,
  endTime: String
}

type CreateWeeklyEventInput {
  startsOn: String!,
  endsOn: String!,
  startTime: String!,
  endTime: String!
}

type RootMutation {
  createEvent(input: CreateEventInput!): Event
  updateEvent(input: UpdateEventInput!): Event
  # If a weeklyEventId is given, the event is removed from that weekly event
  deleteEvent(eventId: ID!, weeklyEventId: ID!): Event
  createWeeklyEvent(input: CreateWeeklyEventInput!): WeeklyEvent
}

type RootQuery {
  events(): [Event!],
  weeklyEventS(): [WeeklyEvent!],
  event(id: ID!): Event
  weeklyEvent(id: ID!): WeeklyEvent
}

schema { query: RootQuery, mutation: RootMutation }
