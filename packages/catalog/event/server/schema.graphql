type Event {
  id: ID!
  startDate: String!
  endDate: String!
  weeklyEvent: WeeklyEvent
}

type WeeklyEvent {
  id: ID!
  startsOn: String!
  endsOn: String!
  events: [Event!]!
}

input CreateEventInput {
  id: ID!
  startsOn: String!
  endsOn: String!
  startTime: String!
  endTime: String!
}

input UpdateEventInput {
  id: ID!
  startsOn: String
  endsOn: String
  startTime: String
  endTime: String
}

input CreateWeeklyEventInput {
  startsOn: String!
  endsOn: String!
  startTime: String!
  endTime: String!
}

type Mutation {
  createEvent(input: CreateEventInput!): Event
  updateEvent(input: UpdateEventInput!): Event
  # If a weeklyEventId is given, the event is removed from that weekly event
  deleteEvent(eventId: ID!, weeklyEventId: ID!): Event
  createWeeklyEvent(input: CreateWeeklyEventInput!): WeeklyEvent
}

type Query {
  events: [Event!]
  weeklyEvents: [WeeklyEvent!]
  event(id: ID!): Event
  weeklyEvent(id: ID!): WeeklyEvent
}
