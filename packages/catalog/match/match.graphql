type Match {
  id: ID!
  userIds: [ID!]
  active: Boolean!
}

type Attempt {
  id: ID!
  sourceId: ID!
  targetId: ID!
}

input MatchesInput {
  userId: ID
  active: Boolean
}

input AttemptMatchInput {
  id: ID
  sourceId: ID!
  targetId: ID!
}

input WithdrawAttemptInput {
  id: ID
  sourceId: ID
  targetId: ID
}

# only two userIds must be provided
input CreateMatchInput {
  id: ID
  userIds: [ID!]
}

type Query {
  match(id: ID!): Match
  matches(input: MatchesInput!): [Match]
}

type Mutation {
  attemptMatch(input: AttemptMatchInput!): Attempt
  withdrawAttempt(input: WithdrawAttemptInput!): Boolean
  createMatch(input: CreateMatchInput!): Match
  deactivateMatch(id: ID!): Boolean
  deleteMatch(id: ID!): Boolean
}
