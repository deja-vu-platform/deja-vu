type Schedule {
    id: ID!
    availability: [Slot!]
}

type Slot {
    id: ID!
    startDate: String!
    endDate: String!
}

input SlotsInput {
    scheduleId: ID!
    # can limit the start and end dates for the slots that we're interested in
    startDate: String
    endDate: String
    available: Boolean
}

input NextAvailablityInput {
    # need to only fetch from current day/ start day (whichever is later) onwards
    scheduleIds: [ID!]
}

input AllAvailablityInput {
    # need to only fetch from current day/ start day (whichever is later) onwards
    scheduleIds: [ID!]
    startDate: String
    endDate: String
}

input CreateScheduleInput {
    id: ID
    slots: [Slot]
}

input UpdateScheduleInput {
  id: ID!
  add: [Slot!]
  update: [Slot!]
  delete: [ID!]
}

type Query {
    schedule(id: ID!): Schedule
    slot(id: ID!): Slot
    slots(input: SlotsInput!): [Slot]
    nextAvailability(input: NextAvailabilityInput!): Slot
    allAvailability(input: AllAvailablityInput!): [Slot]
}

type Mutation {
    createSchedule(input: CreateScheduleInput!): Schedule
    updateSchedule(input: UpdateScheduleInput!): Schedule
}
