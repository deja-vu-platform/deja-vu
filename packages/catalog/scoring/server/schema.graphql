type Score {
  id: ID!
  value: Float!
  sourceId: ID!
  targetId: ID!
}

type Target {
  id: ID!
  scores: [Score!]
  total: Float
}

input CreateScoreInput {
  id: ID
  value: Float!
  sourceId: ID!
  targetId: ID!
}

input ShowScoreInput {
  id: ID
  sourceId: ID
  targetId: ID
}

input ShowTargetInput {
  id: ID!
  sourceId: ID
}

# If both targetIds and sourceId are provided, it will only list the targets
#   in `targetIds` that have scores made by `sourceId`.
# If `targetIds` is provided alone, it will load the list of targets (and all
#   of its associated scores regardless of which source gave it to them).
# If sourceId is provided alone, it would load all targets that have scores
#   made by `sourceId`.
input TargetsByScoreInput {
  asc: Boolean
  targetIds: [ID]
  sourceId: ID
}

type Query {
  score(input: ShowScoreInput!): Score
  target(input: ShowTargetInput!): Target
  targetsByScore(input: TargetsByScoreInput!): [Target!]
}

type Mutation {
  createScore(input: CreateScoreInput!): Score
}
