type Source {
  id: ID!,
  ratings: [Rating]
}

type Target {
  id: ID!,
  ratings: [Rating]
}

type Rating {
  sourceId: ID!
  targetId: ID!
  rating: Float
}

type AverageRatingForTargetOutput {
  rating: Float
  count: Float
}

type Query {
  source(id: ID!): Source
  target(id: ID!): Target
  ratingBySourceTarget(sourceId: ID!, targetId: ID!): Rating
  averageRatingForTarget(targetId: ID!)
    : AverageRatingForTargetOutput
}

type Mutation {
  createSource(sourceId: ID!): Source
  createTarget(targetId: ID!): Target 
  updateRating(sourceId: ID!, targetId: ID!, newRating: Float): Boolean
}
