type Rating {
  sourceId: ID!
  targetId: ID!
  rating: Float!
}

type AverageRatingForTargetOutput {
  rating: Float
  count: Float
}

input RatingInput {
  bySourceId: ID!
  ofTargetId: ID!
}

input RatingsInput {
  bySourceId: ID
  ofTargetId: ID
}

input SetRatingInput {
  sourceId: ID!
  targetId: ID!
  newRating: Float
}

type Query {
  rating(input: RatingInput!): Rating
  ratings(input: RatingsInput!): [Rating]
  ratingCount(input: RatingsInput!): Int
  averageRatingForTarget(targetId: ID!): AverageRatingForTargetOutput
}

type Mutation {
  setRating(input: SetRatingInput!): Boolean
}
