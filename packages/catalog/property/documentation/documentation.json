{
    "pipes": [
        {
            "name": "CamelToTitleCasePipe",
            "id": "pipe-CamelToTitleCasePipe-ffec7ca73f0eb5aaf2e6f6615a4dd8a6",
            "file": "src/app/property/create-property/create-property.component.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "camelCase",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "camelCase",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "camelToTitleCase",
            "sourceCode": "import {\n  Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output,\n  Pipe, PipeTransform, SimpleChanges, ViewChild\n} from '@angular/core';\nimport {\n  AbstractControl, ControlValueAccessor, FormBuilder, FormControl,\n  FormGroup, FormGroupDirective, NG_VALIDATORS, NG_VALUE_ACCESSOR,\n  ValidationErrors, Validator, Validators\n} from '@angular/forms';\n\nimport {\n  GatewayService, GatewayServiceFactory, OnExecSuccess, RunService\n} from '@deja-vu/core';\n\nimport { PropertyRes, Property } from '../shared/property.model';\n\nimport { map, startWith } from 'rxjs/operators';\n\nimport * as Ajv from 'ajv';\n\nimport * as _ from 'lodash';\n\n\n@Pipe({ name: 'camelToTitleCase'})\nexport class CamelToTitleCasePipe implements PipeTransform {\n  transform(camelCase: string): string {\n    return _.startCase(_.camelCase(camelCase));\n  }\n}\n\n/**\n * Create a single property\n * You probably don't want to use this on its own and instead want Create Object\n */\n@Component({\n  selector: 'property-create-property',\n  templateUrl: './create-property.component.html',\n  styleUrls: ['./create-property.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: CreatePropertyComponent,\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: CreatePropertyComponent,\n      multi: true\n    }\n  ]\n})\nexport class CreatePropertyComponent\nimplements OnInit, OnChanges, ControlValueAccessor, Validator,\nOnExecSuccess {\n  /**\n   * The name of the property to create\n   * (should match a name in the schama the cliche is configured with)\n   */\n  @Input() name: string;\n  /**\n   * (Optional) default value to populate the input with\n   */\n  @Input() initialValue;\n  /**\n   * The value of the property created\n   */\n  @Output() value = new EventEmitter();\n\n  propertyControl: FormControl;\n  schemaErrors: string[];\n  required = false;\n  type;\n\n  private gs: GatewayService;\n  private schemaValidate;\n  private ajv = new Ajv();\n\n  constructor(\n    private elem: ElementRef, private rs: RunService,\n    private gsf: GatewayServiceFactory) {}\n\n  ngOnInit() {\n    this.gs = this.gsf.for(this.elem);\n    this.rs.register(this.elem, this);\n    this.loadSchema();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.name) {\n      this.loadSchema();\n    }\n  }\n\n  /**\n   * Get the JSON Schema object corresponding to the property being created.\n   *\n   * This is used for initializing the property form control with the required\n   * validators.\n   */\n  loadSchema() {\n    if (!this.gs || !this.name) {\n      return;\n    }\n    this.gs\n      .get<PropertyRes>('/graphql', {\n        params: {\n          inputs: { name: this.name },\n          extraInfo: {\n            returnFields: `\n              schema\n              required\n            `\n          }\n        }\n      })\n      .pipe(map((res: PropertyRes) => res.data.property))\n      .subscribe((property: Property) => {\n        const schema = JSON.parse(property.schema);\n        this.schemaValidate = this.ajv.compile(schema);\n        if (schema.type === 'integer' ||\n            schema.type === 'number') {\n          this.type = Number;\n        } else if (schema.type === 'string') {\n          this.type = String;\n        } else {\n          this.type = Boolean;\n        }\n        const validators = [this.schemaValidator.bind(this)];\n        if (property.required) {\n          this.required = true;\n          validators.push(Validators.required);\n        }\n        this.propertyControl = new FormControl('', validators);\n        this.propertyControl.setValue(this.initialValue);\n        this.propertyControl.valueChanges.subscribe((newValue) => {\n          this.value.emit(newValue);\n        });\n        this.propertyControl.valueChanges\n          .pipe(startWith(this.propertyControl.value));\n      });\n  }\n\n  schemaValidator(control: AbstractControl): {[key: string]: any} {\n    if (!this.schemaValidate || !control.value) {\n      return null;\n    }\n    const valid = this.schemaValidate(this.type(control.value));\n    if (!valid) {\n      this.schemaErrors = _\n        .map(this.schemaValidate.errors, (error) => error.message);\n\n      return {\n        schema: true\n      };\n    }\n\n    return null;\n  }\n\n  writeValue(value: any) {\n    if (!this.propertyControl) {\n      return;\n    }\n    if (value) {\n      this.propertyControl.setValue(value);\n    } else {\n      this.propertyControl.reset();\n    }\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this.value.subscribe(fn);\n  }\n\n  registerOnTouched() {}\n\n  validate(c: FormControl): ValidationErrors {\n    if (!this.propertyControl) {\n      return null;\n    }\n\n    return this.propertyControl.validator(this.propertyControl);\n  }\n\n  dvOnExecSuccess() {\n    this.propertyControl.reset();\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "PropertiesRes",
            "id": "interface-PropertiesRes-8ae4769a99ba3aac2872679978a673ef",
            "file": "src/app/property/shared/property.model.ts",
            "type": "interface",
            "sourceCode": "import * as _ from 'lodash';\n\nexport interface Property {\n  name: string;\n  required: boolean;\n  schema: any;\n}\n\nexport interface PropertiesRes {\n  data: { properties: Property[] };\n}\n\nexport interface PropertyRes {\n  data: { property: Property };\n}\n\nexport function properties(showOnly: string[], showExclude: string[],\n  propertyNames: string[]): string[] {\n\n  if (!_.isEmpty(showOnly)) {\n    return showOnly;\n  } else if (!_.isEmpty(showExclude)) {\n    return _.difference(propertyNames, showExclude);\n  }\n\n  return propertyNames;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Property",
            "id": "interface-Property-8ae4769a99ba3aac2872679978a673ef",
            "file": "src/app/property/shared/property.model.ts",
            "type": "interface",
            "sourceCode": "import * as _ from 'lodash';\n\nexport interface Property {\n  name: string;\n  required: boolean;\n  schema: any;\n}\n\nexport interface PropertiesRes {\n  data: { properties: Property[] };\n}\n\nexport interface PropertyRes {\n  data: { property: Property };\n}\n\nexport function properties(showOnly: string[], showExclude: string[],\n  propertyNames: string[]): string[] {\n\n  if (!_.isEmpty(showOnly)) {\n    return showOnly;\n  } else if (!_.isEmpty(showExclude)) {\n    return _.difference(propertyNames, showExclude);\n  }\n\n  return propertyNames;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "required",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "schema",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PropertyRes",
            "id": "interface-PropertyRes-8ae4769a99ba3aac2872679978a673ef",
            "file": "src/app/property/shared/property.model.ts",
            "type": "interface",
            "sourceCode": "import * as _ from 'lodash';\n\nexport interface Property {\n  name: string;\n  required: boolean;\n  schema: any;\n}\n\nexport interface PropertiesRes {\n  data: { properties: Property[] };\n}\n\nexport interface PropertyRes {\n  data: { property: Property };\n}\n\nexport function properties(showOnly: string[], showExclude: string[],\n  propertyNames: string[]): string[] {\n\n  if (!_.isEmpty(showOnly)) {\n    return showOnly;\n  } else if (!_.isEmpty(showExclude)) {\n    return _.difference(propertyNames, showExclude);\n  }\n\n  return propertyNames;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ValueMap",
            "id": "interface-ValueMap-c892447b519833ba3478a15f503eccfe",
            "file": "src/app/property/create-object/create-object.component.ts",
            "type": "interface",
            "sourceCode": "import {\n  Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild\n} from '@angular/core';\n\nimport {\n  AbstractControl, FormBuilder, FormControl, FormGroup, FormGroupDirective,\n  Validators\n} from '@angular/forms';\n\nimport {\n  GatewayService,\n  GatewayServiceFactory,\n  OnExecFailure,\n  OnExecSuccess,\n  OnExec,\n  RunService\n} from '@deja-vu/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\n\nimport { PropertiesRes, Property } from '../shared/property.model';\n\nimport * as _ from 'lodash';\n\nimport { API_PATH } from '../property.config';\n\n\nexport interface ValueMap {\n  [property: string]: any;\n}\n\n\nconst SAVED_MSG_TIMEOUT = 3000;\n\n/**\n * Create an object, which has one or more properties\n */\n@Component({\n  selector: 'property-create-object',\n  templateUrl: './create-object.component.html',\n  styleUrls: ['./create-object.component.css']\n})\nexport class CreateObjectComponent\n  implements OnInit, OnExec, OnExecSuccess, OnExecFailure {\n  @Input() id: string | undefined;\n  savedInitialValue: ValueMap;\n  @Input() set initialValue(value: ValueMap) {\n    if (!this.formInitialized) {\n      this.savedInitialValue = value;\n\n      return;\n    }\n    for (const fieldName of _.keys(value)) {\n      if (this[fieldName]) {\n        this[fieldName].setValue(value[fieldName]);\n      }\n    }\n  }\n  /**\n   * List of property names to not show input fields for\n   */\n  @Input() showExclude: string[] = [];\n  /**\n   * Text for the button to create an object\n   */\n  @Input() buttonLabel = 'Create Object';\n  /**\n   * Text to show when an object is successfully created\n   */\n  @Input() newObjectSavedText = 'New object saved';\n  /**\n   * Whether or not the create object button should be shown\n   */\n  @Input() showOptionToSubmit = true;\n  /**\n   * Whether or not the created object should be saved to the database\n   */\n  @Input() save = true;\n  /**\n   * The created object\n   */\n  @Output() object = new EventEmitter<any>();\n\n  @ViewChild(FormGroupDirective) form;\n\n  createObjectForm: FormGroup = this.builder.group({});\n  properties: Property[];\n\n  newObjectSaved = false;\n  newObjectError: string;\n  formInitialized = false;\n\n  private gs: GatewayService;\n\n  constructor(\n    private elem: ElementRef, private gsf: GatewayServiceFactory,\n    private rs: RunService, private builder: FormBuilder,\n    @Inject(API_PATH) private apiPath) { }\n\n  ngOnInit() {\n    this.gs = this.gsf.for(this.elem);\n    this.rs.register(this.elem, this);\n    this.loadSchema();\n  }\n\n  loadSchema() {\n    if (!this.gs) {\n      return;\n    }\n    this.gs\n      .get<PropertiesRes>(this.apiPath, {\n        params: {\n          extraInfo: {\n            action: 'schema',\n            returnFields: 'name'\n          }\n        }\n      })\n      .pipe(map((res: PropertiesRes) => res.data.properties))\n      .subscribe((properties: Property[]) => {\n        this.properties = properties;\n        const formControls = {};\n        for (const property of properties) {\n          this[property.name] = new FormControl('');\n          formControls[property.name] = this[property.name];\n        }\n        this.createObjectForm = this.builder.group(formControls);\n        this.formInitialized = true;\n        this.initialValue = this.savedInitialValue;\n      });\n  }\n\n  onSubmit() {\n    this.rs.exec(this.elem);\n  }\n\n  async dvOnExec(): Promise<void> {\n    const input = { id: this.id };\n    for (const property of this.properties) {\n      input[property.name] = this[property.name].value;\n    }\n    if (this.save) {\n      const res = await this.gs\n        .post<{ data: any, errors: { message: string }[] }>(this.apiPath, {\n          inputs: { input: input },\n          extraInfo: {\n            action: 'create',\n            returnFields: 'id'\n          }\n        })\n        .toPromise();\n      if (res.errors) {\n        throw new Error(_.map(res.errors, 'message')\n          .join());\n      }\n    } else {\n      this.gs.noRequest();\n    }\n    this.object.emit(input);\n  }\n\n  dvOnExecSuccess() {\n    if (this.showOptionToSubmit && this.save) {\n      this.newObjectError = '';\n      this.newObjectSaved = true;\n      window.setTimeout(() => {\n        this.newObjectSaved = false;\n      }, SAVED_MSG_TIMEOUT);\n    }\n    // Can't do `this.form.reset();`\n    // See https://github.com/angular/material2/issues/4190\n    if (this.form) {\n      this.form.resetForm();\n    }\n  }\n\n  dvOnExecFailure(reason: Error) {\n    if (this.showOptionToSubmit && this.save) {\n      this.newObjectError = reason.message;\n    }\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-c892447b519833ba3478a15f503eccfe",
                    "args": [
                        {
                            "name": "property",
                            "type": "string"
                        }
                    ],
                    "returnType": "any",
                    "line": 29
                }
            ],
            "kind": 159,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-a5b7a314c37a96971bc7502a7c815155",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "property-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'property'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'property-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'property';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">\n  <h1>Create Object with id Ben</h1>\n  <property-create-object id=\"ben\"></property-create-object>\n  <h1>Show Object with id Ben</h1>\n  <property-show-object id=\"ben\"></property-show-object>\n  lastname only: <property-show-object id=\"ben\" [showOnly]=\"['lastName']\">\n  </property-show-object>\n  <h1>Show Object and Show All Objects in a Transaction</h1>\n  <dv-tx>\n    <property-show-object id=\"ben\"></property-show-object>\n    <property-show-objects></property-show-objects>\n  </dv-tx>\n  <h1>Create Objects</h1>\n  <dv-tx>\n    <property-create-objects [hidden]=\"true\" [objects]=\"[\n      {firstName: 'foo', lastName: 'bar'},\n      {firstName: 'foo1', lastName: 'bar1'},\n      {firstName: 'foo2', lastName: 'bar2'}\n    ]\">\n    </property-create-objects>\n    <dv-button>Create Objects</dv-button>\n  </dv-tx>\n  <h1>Show Objects</h1>\n  <property-show-objects></property-show-objects>\n  <h1>Choose Object</h1>\n  <property-choose-object\n    (selectedObjectId)=\"chooseObjectId=$event\"\n    [showOnly]=\"['lastName']\">\n  </property-choose-object>\n  Select id is: {{chooseObjectId}}\n  <h1>Choose Object from autocomplete</h1>\n  <property-object-autocomplete\n    (selectedObjectId)=\"autocompleteObjectId=$event\"\n    [showOnly]=\"['lastName']\">\n  </property-object-autocomplete>\n  Select id is: {{autocompleteObjectId}}\n</div>\n"
        },
        {
            "name": "ChooseObjectComponent",
            "id": "component-ChooseObjectComponent-0549975d665a317b3f66758cfabd61c1",
            "file": "src/app/property/choose-object/choose-object.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "property-choose-object",
            "styleUrls": [
                "./choose-object.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./choose-object.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "chooseObjectSelectPlaceholder",
                    "defaultValue": "'Choose Object'",
                    "description": "<p>Text to show to prompt the user to choose an object.</p>\n",
                    "line": 30
                },
                {
                    "name": "execOnSelection",
                    "defaultValue": "true",
                    "description": "<p>Whether or not the action should execute upon the user selecting an object</p>\n",
                    "line": 58
                },
                {
                    "name": "initialObjectId",
                    "description": "<p>If given, the input starts with the object with the given ID selected</p>\n",
                    "line": 67,
                    "type": "string"
                },
                {
                    "name": "resetOnExecSuccess",
                    "defaultValue": "false",
                    "description": "<p>Whether or not the selection should be cleared when the action\nexecutes sucessfully</p>\n",
                    "line": 63
                },
                {
                    "name": "showBaseUrlsOnly",
                    "defaultValue": "false",
                    "description": "<p>Passed to showObject action\n(For the default showObject, this will cause any URL properties\nto display without the protocol and path)</p>\n",
                    "line": 54,
                    "type": "boolean"
                },
                {
                    "name": "showExclude",
                    "description": "<p>List of property names to pass to showObject actoin\n(For the default showObject, this will cause\nthese properties to not be shown)</p>\n",
                    "line": 48,
                    "type": "string[]"
                },
                {
                    "name": "showObject",
                    "defaultValue": "{\n    type: <Type<Component>> ShowObjectComponent\n  }",
                    "description": "<p>Action to use to render each object</p>\n",
                    "line": 34,
                    "type": "Action"
                },
                {
                    "name": "showOnly",
                    "description": "<p>List of property names to pass to showObject actoin\n(For the default showObject, this will cause only\nthese properties to be shown)</p>\n",
                    "line": 42,
                    "type": "string[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "objects",
                    "defaultValue": "new EventEmitter<Object[]>()",
                    "description": "<p>All objects</p>\n",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedObjectId",
                    "defaultValue": "new EventEmitter<string>()",
                    "description": "<p>The ID of the selected object</p>\n",
                    "line": 79,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_objects",
                    "defaultValue": "[]",
                    "type": "Object[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "_selectedObjectId",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "chooseObject",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                }
            ],
            "methodsClass": [
                {
                    "name": "dvOnExecSuccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154
                },
                {
                    "name": "fetchObjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125
                },
                {
                    "name": "fetchProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string[]>",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93
                },
                {
                    "name": "updateSelected",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Allows the user to select an object from a list</p>\n",
            "rawdescription": "Allows the user to select an object from a list",
            "type": "component",
            "sourceCode": "import {\n  Component, ElementRef, EventEmitter, Inject, Input, OnChanges, OnInit, Output,\n  Type\n} from '@angular/core';\n\nimport {\n  Action, GatewayService, GatewayServiceFactory, OnExecSuccess, RunService\n} from '@deja-vu/core';\nimport * as _ from 'lodash';\n\nimport { properties, Property } from '../shared/property.model';\n\nimport { ShowObjectComponent } from '../show-object/show-object.component';\n\nimport { API_PATH } from '../property.config';\n\n\n/**\n * Allows the user to select an object from a list\n */\n@Component({\n  selector: 'property-choose-object',\n  templateUrl: './choose-object.component.html',\n  styleUrls: ['./choose-object.component.css']\n})\nexport class ChooseObjectComponent implements OnInit, OnExecSuccess {\n  /**\n   * Text to show to prompt the user to choose an object.\n   */\n  @Input() chooseObjectSelectPlaceholder = 'Choose Object';\n  /**\n   * Action to use to render each object\n   */\n  @Input() showObject: Action = {\n    type: <Type<Component>> ShowObjectComponent\n  };\n  /**\n   * List of property names to pass to showObject actoin\n   * (For the default showObject, this will cause only\n   * these properties to be shown)\n   */\n  @Input() showOnly: string[];\n  /**\n   * List of property names to pass to showObject actoin\n   * (For the default showObject, this will cause\n   * these properties to not be shown)\n   */\n  @Input() showExclude: string[];\n  /**\n   * Passed to showObject action\n   * (For the default showObject, this will cause any URL properties\n   * to display without the protocol and path)\n   */\n  @Input() showBaseUrlsOnly: boolean = false;\n  /**\n   * Whether or not the action should execute upon the user selecting an object\n   */\n  @Input() execOnSelection = true;\n  /**\n   * Whether or not the selection should be cleared when the action\n   * executes sucessfully\n   */\n  @Input() resetOnExecSuccess = false;\n  /**\n   * If given, the input starts with the object with the given ID selected\n   */\n  @Input() set initialObjectId(id: string) {\n    this._selectedObjectId = id;\n    this.selectedObjectId.emit(id);\n  }\n  /**\n   * All objects\n   */\n  @Output() objects = new EventEmitter<Object[]>();\n  _objects: Object[] = [];\n  /**\n   * The ID of the selected object\n   */\n  @Output() selectedObjectId = new EventEmitter<string>();\n\n  chooseObject;\n  _selectedObjectId;\n  private properties: string[];\n  private gs: GatewayService;\n\n  constructor(\n    private elem: ElementRef, private gsf: GatewayServiceFactory,\n    private rs: RunService,\n    @Inject(API_PATH) private apiPath) {\n    this.chooseObject = this;\n  }\n\n  ngOnInit() {\n    this.gs = this.gsf.for(this.elem);\n    this.rs.register(this.elem, this);\n    this.load();\n  }\n\n  async load() {\n    if (!this.gs) {\n      return;\n    }\n    if (!this.properties) {\n      this.properties = properties(\n        this.showOnly, this.showExclude, await this.fetchProperties());\n    }\n    this.fetchObjects();\n  }\n\n  async fetchProperties(): Promise<string[]> {\n    const res = await this.gs\n      .get<{data: {properties: Property[]}}>(this.apiPath, {\n        params: {\n          extraInfo: {\n            action: 'properties',\n            returnFields: 'name'\n          }\n        }\n      })\n      .toPromise();\n\n    return _.map(res.data.properties, 'name');\n  }\n\n  fetchObjects() {\n    if (this.gs) {\n      this.gs\n        .get<{data: {objects: Object[]}}>(this.apiPath, {\n          params: {\n            extraInfo: {\n              action: 'objects',\n              returnFields: `\n                id\n                ${this.properties.join('\\n')}\n              `\n            }\n          }\n        })\n        .subscribe((res) => {\n          this._objects = res.data.objects;\n          this.objects.emit(this._objects);\n        });\n    }\n  }\n\n  updateSelected(id: string) {\n    this._selectedObjectId = id;\n    this.selectedObjectId.emit(id);\n    if (this.execOnSelection) {\n      setTimeout(() => this.rs.exec(this.elem));\n    }\n  }\n\n  dvOnExecSuccess() {\n    if (this.resetOnExecSuccess) {\n      this._selectedObjectId = null;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./choose-object.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elem",
                        "type": "ElementRef"
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory"
                    },
                    {
                        "name": "rs",
                        "type": "RunService"
                    },
                    {
                        "name": "apiPath",
                        "type": ""
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rs",
                        "type": "RunService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiPath",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnExecSuccess"
            ],
            "accessors": {
                "initialObjectId": {
                    "name": "initialObjectId",
                    "setSignature": {
                        "name": "initialObjectId",
                        "type": "void",
                        "args": [
                            {
                                "name": "id",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 67,
                        "description": "<p>If given, the input starts with the object with the given ID selected</p>\n",
                        "jsdoctags": [
                            {
                                "name": "id",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<mat-form-field>\n  <mat-select [placeholder]=\"chooseObjectSelectPlaceholder\"\n    [(value)]=\"_selectedObjectId\"\n    (selectionChange)=\"updateSelected($event.value)\">\n    <mat-option>None</mat-option>\n    <mat-option *ngFor=\"let object of _objects\" [value]=\"object.id\">\n      <dv-include [action]=\"showObject\" default-showObject=\"{ tag: property-show-object }\" [inputs]=\"{\n          object: object, showOnly: showOnly, showExclude: showExclude,\n          properties: properties, showBaseUrlsOnly: showBaseUrlsOnly\n        }\"\n        [parent]=\"chooseObject\">\n      </dv-include>\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n"
        },
        {
            "name": "CreateObjectComponent",
            "id": "component-CreateObjectComponent-c892447b519833ba3478a15f503eccfe",
            "file": "src/app/property/create-object/create-object.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "property-create-object",
            "styleUrls": [
                "./create-object.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-object.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonLabel",
                    "defaultValue": "'Create Object'",
                    "description": "<p>Text for the button to create an object</p>\n",
                    "line": 67
                },
                {
                    "name": "id",
                    "line": 46,
                    "type": "string | undefined"
                },
                {
                    "name": "initialValue",
                    "line": 48,
                    "type": ""
                },
                {
                    "name": "newObjectSavedText",
                    "defaultValue": "'New object saved'",
                    "description": "<p>Text to show when an object is successfully created</p>\n",
                    "line": 71
                },
                {
                    "name": "save",
                    "defaultValue": "true",
                    "description": "<p>Whether or not the created object should be saved to the database</p>\n",
                    "line": 79
                },
                {
                    "name": "showExclude",
                    "defaultValue": "[]",
                    "description": "<p>List of property names to not show input fields for</p>\n",
                    "line": 63,
                    "type": "string[]"
                },
                {
                    "name": "showOptionToSubmit",
                    "defaultValue": "true",
                    "description": "<p>Whether or not the create object button should be shown</p>\n",
                    "line": 75
                }
            ],
            "outputsClass": [
                {
                    "name": "object",
                    "defaultValue": "new EventEmitter<any>()",
                    "description": "<p>The created object</p>\n",
                    "line": 83,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "createObjectForm",
                    "defaultValue": "this.builder.group({})",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "form",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "FormGroupDirective"
                        }
                    ]
                },
                {
                    "name": "formInitialized",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "newObjectError",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "newObjectSaved",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "properties",
                    "type": "Property[]",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "savedInitialValue",
                    "type": "ValueMap",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "dvOnExec",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 138,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "dvOnExecFailure",
                    "args": [
                        {
                            "name": "reason",
                            "type": "Error"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "jsdoctags": [
                        {
                            "name": "reason",
                            "type": "Error",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dvOnExecSuccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163
                },
                {
                    "name": "loadSchema",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Create an object, which has one or more properties</p>\n",
            "rawdescription": "Create an object, which has one or more properties",
            "type": "component",
            "sourceCode": "import {\n  Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild\n} from '@angular/core';\n\nimport {\n  AbstractControl, FormBuilder, FormControl, FormGroup, FormGroupDirective,\n  Validators\n} from '@angular/forms';\n\nimport {\n  GatewayService,\n  GatewayServiceFactory,\n  OnExecFailure,\n  OnExecSuccess,\n  OnExec,\n  RunService\n} from '@deja-vu/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\n\nimport { PropertiesRes, Property } from '../shared/property.model';\n\nimport * as _ from 'lodash';\n\nimport { API_PATH } from '../property.config';\n\n\nexport interface ValueMap {\n  [property: string]: any;\n}\n\n\nconst SAVED_MSG_TIMEOUT = 3000;\n\n/**\n * Create an object, which has one or more properties\n */\n@Component({\n  selector: 'property-create-object',\n  templateUrl: './create-object.component.html',\n  styleUrls: ['./create-object.component.css']\n})\nexport class CreateObjectComponent\n  implements OnInit, OnExec, OnExecSuccess, OnExecFailure {\n  @Input() id: string | undefined;\n  savedInitialValue: ValueMap;\n  @Input() set initialValue(value: ValueMap) {\n    if (!this.formInitialized) {\n      this.savedInitialValue = value;\n\n      return;\n    }\n    for (const fieldName of _.keys(value)) {\n      if (this[fieldName]) {\n        this[fieldName].setValue(value[fieldName]);\n      }\n    }\n  }\n  /**\n   * List of property names to not show input fields for\n   */\n  @Input() showExclude: string[] = [];\n  /**\n   * Text for the button to create an object\n   */\n  @Input() buttonLabel = 'Create Object';\n  /**\n   * Text to show when an object is successfully created\n   */\n  @Input() newObjectSavedText = 'New object saved';\n  /**\n   * Whether or not the create object button should be shown\n   */\n  @Input() showOptionToSubmit = true;\n  /**\n   * Whether or not the created object should be saved to the database\n   */\n  @Input() save = true;\n  /**\n   * The created object\n   */\n  @Output() object = new EventEmitter<any>();\n\n  @ViewChild(FormGroupDirective) form;\n\n  createObjectForm: FormGroup = this.builder.group({});\n  properties: Property[];\n\n  newObjectSaved = false;\n  newObjectError: string;\n  formInitialized = false;\n\n  private gs: GatewayService;\n\n  constructor(\n    private elem: ElementRef, private gsf: GatewayServiceFactory,\n    private rs: RunService, private builder: FormBuilder,\n    @Inject(API_PATH) private apiPath) { }\n\n  ngOnInit() {\n    this.gs = this.gsf.for(this.elem);\n    this.rs.register(this.elem, this);\n    this.loadSchema();\n  }\n\n  loadSchema() {\n    if (!this.gs) {\n      return;\n    }\n    this.gs\n      .get<PropertiesRes>(this.apiPath, {\n        params: {\n          extraInfo: {\n            action: 'schema',\n            returnFields: 'name'\n          }\n        }\n      })\n      .pipe(map((res: PropertiesRes) => res.data.properties))\n      .subscribe((properties: Property[]) => {\n        this.properties = properties;\n        const formControls = {};\n        for (const property of properties) {\n          this[property.name] = new FormControl('');\n          formControls[property.name] = this[property.name];\n        }\n        this.createObjectForm = this.builder.group(formControls);\n        this.formInitialized = true;\n        this.initialValue = this.savedInitialValue;\n      });\n  }\n\n  onSubmit() {\n    this.rs.exec(this.elem);\n  }\n\n  async dvOnExec(): Promise<void> {\n    const input = { id: this.id };\n    for (const property of this.properties) {\n      input[property.name] = this[property.name].value;\n    }\n    if (this.save) {\n      const res = await this.gs\n        .post<{ data: any, errors: { message: string }[] }>(this.apiPath, {\n          inputs: { input: input },\n          extraInfo: {\n            action: 'create',\n            returnFields: 'id'\n          }\n        })\n        .toPromise();\n      if (res.errors) {\n        throw new Error(_.map(res.errors, 'message')\n          .join());\n      }\n    } else {\n      this.gs.noRequest();\n    }\n    this.object.emit(input);\n  }\n\n  dvOnExecSuccess() {\n    if (this.showOptionToSubmit && this.save) {\n      this.newObjectError = '';\n      this.newObjectSaved = true;\n      window.setTimeout(() => {\n        this.newObjectSaved = false;\n      }, SAVED_MSG_TIMEOUT);\n    }\n    // Can't do `this.form.reset();`\n    // See https://github.com/angular/material2/issues/4190\n    if (this.form) {\n      this.form.resetForm();\n    }\n  }\n\n  dvOnExecFailure(reason: Error) {\n    if (this.showOptionToSubmit && this.save) {\n      this.newObjectError = reason.message;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-object.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elem",
                        "type": "ElementRef"
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory"
                    },
                    {
                        "name": "rs",
                        "type": "RunService"
                    },
                    {
                        "name": "builder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "apiPath",
                        "type": ""
                    }
                ],
                "line": 94,
                "jsdoctags": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rs",
                        "type": "RunService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "builder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiPath",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnExec",
                "OnExecSuccess",
                "OnExecFailure"
            ],
            "accessors": {
                "initialValue": {
                    "name": "initialValue",
                    "setSignature": {
                        "name": "initialValue",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<form (ngSubmit)=\"onSubmit()\"\n  [formGroup]=\"createObjectForm\"\n  class=\"form-horizontal\">\n  <div *ngIf=\"showOptionToSubmit\" class=\"form-group\">\n    <div *ngIf=\"newObjectSaved\">\n      <i class=\"material-icons\">done</i>\n      {{newObjectSavedText}}\n    </div>\n    <mat-error *ngIf=\"newObjectError\">\n      <i class=\"material-icons\">report_problem</i>\n      {{newObjectError}}\n    </mat-error>\n  </div>\n  <div class=\"form-group\" *ngFor=\"let property of properties\">\n    <property-create-property [name]=\"property.name\" [formControlName]=\"property.name\" [hidden]=\"showExclude.includes(property.name)\">\n    </property-create-property>\n  </div>\n  <div *ngIf=\"showOptionToSubmit\" class=\"form-group\">\n    <button mat-button type=\"submit\" \n      [disabled]=\"!createObjectForm.valid\">\n        {{buttonLabel}}\n    </button>\n  </div>\n</form>\n"
        },
        {
            "name": "CreateObjectsComponent",
            "id": "component-CreateObjectsComponent-c623f9a9744e6e796a98d4a689ca1a88",
            "file": "src/app/property/create-objects/create-objects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "property-create-objects",
            "styleUrls": [
                "./create-objects.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-objects.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "objects",
                    "description": "<p>List of objects to save to the database as new entities</p>\n",
                    "line": 36,
                    "type": "any[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "dvOnExec",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "loadSchema",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "objectToCreateObjectInput",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Create objects in bulk\nThis action does not display anything.\nThe data for the objects must come from another action.\nThe action&#39;s execution must be triggered by another action (in a transaction)</p>\n",
            "rawdescription": "Create objects in bulk\nThis action does not display anything.\nThe data for the objects must come from another action.\nThe action's execution must be triggered by another action (in a transaction)",
            "type": "component",
            "sourceCode": "import {\n  Component, ElementRef, EventEmitter, Inject, Input, OnInit\n} from '@angular/core';\n\nimport {\n  GatewayService, GatewayServiceFactory, OnExec, RunService\n} from '@deja-vu/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\n\nimport { PropertiesRes, Property } from '../shared/property.model';\n\nimport * as _ from 'lodash';\n\nimport { API_PATH } from '../property.config';\n\n\nconst SAVED_MSG_TIMEOUT = 3000;\n\n/**\n * Create objects in bulk\n * This action does not display anything.\n * The data for the objects must come from another action.\n * The action's execution must be triggered by another action (in a transaction)\n */\n@Component({\n  selector: 'property-create-objects',\n  templateUrl: './create-objects.component.html',\n  styleUrls: ['./create-objects.component.css']\n})\nexport class CreateObjectsComponent implements OnInit, OnExec {\n  /**\n   * List of objects to save to the database as new entities\n   */\n  @Input() objects: any[];\n\n  private gs: GatewayService;\n  private properties: string[];\n\n  constructor(\n    private elem: ElementRef, private gsf: GatewayServiceFactory,\n    private rs: RunService,\n    @Inject(API_PATH) private apiPath) {}\n\n  ngOnInit() {\n    this.gs = this.gsf.for(this.elem);\n    this.rs.register(this.elem, this);\n    this.loadSchema();\n  }\n\n  loadSchema() {\n    if (!this.gs) {\n      return;\n    }\n    this.gs\n      .get<PropertiesRes>(this.apiPath, {\n        params: {\n          extraInfo: {\n            action: 'schema',\n            returnFields: 'name'\n          }\n        }\n      })\n      .pipe(map((res: PropertiesRes) => res.data.properties))\n      .subscribe((properties: Property[]) => {\n        this.properties = _.map(properties, 'name');\n      });\n  }\n\n  async dvOnExec(): Promise<void> {\n    if (_.isEmpty(this.objects)) {\n      return;\n    }\n    const res = await this.gs\n      .post<{data: any, errors: {message: string}[]}>(this.apiPath, {\n        inputs: {\n          input: _.map(this.objects, this.objectToCreateObjectInput.bind(this))\n        },\n        extraInfo: {\n          action: 'create',\n          returnFields: 'id'\n        }\n      })\n      .toPromise();\n    if (res.errors) {\n      throw new Error(_.map(res.errors, 'message')\n        .join());\n    }\n  }\n\n  objectToCreateObjectInput(obj: any) {\n    return _.pick(obj, ['id', ...this.properties]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-objects.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elem",
                        "type": "ElementRef"
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory"
                    },
                    {
                        "name": "rs",
                        "type": "RunService"
                    },
                    {
                        "name": "apiPath",
                        "type": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rs",
                        "type": "RunService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiPath",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnExec"
            ],
            "templateData": ""
        },
        {
            "name": "CreatePropertyComponent",
            "id": "component-CreatePropertyComponent-ffec7ca73f0eb5aaf2e6f6615a4dd8a6",
            "file": "src/app/property/create-property/create-property.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: CreatePropertyComponent, multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: CreatePropertyComponent, multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "property-create-property",
            "styleUrls": [
                "./create-property.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-property.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "initialValue",
                    "description": "<p>(Optional) default value to populate the input with</p>\n",
                    "line": 63
                },
                {
                    "name": "name",
                    "description": "<p>The name of the property to create\n(should match a name in the schama the cliche is configured with)</p>\n",
                    "line": 59,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "value",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>The value of the property created</p>\n",
                    "line": 67,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "propertyControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "schemaErrors",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                }
            ],
            "methodsClass": [
                {
                    "name": "dvOnExecSuccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185
                },
                {
                    "name": "loadSchema",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "description": "<p>Get the JSON Schema object corresponding to the property being created.</p>\n<p>This is used for initializing the property form control with the required\nvalidators.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175
                },
                {
                    "name": "schemaValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 143,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "c",
                            "type": "FormControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors",
                    "typeParameters": [],
                    "line": 177,
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "FormControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Create a single property\nYou probably don&#39;t want to use this on its own and instead want Create Object</p>\n",
            "rawdescription": "Create a single property\nYou probably don't want to use this on its own and instead want Create Object",
            "type": "component",
            "sourceCode": "import {\n  Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output,\n  Pipe, PipeTransform, SimpleChanges, ViewChild\n} from '@angular/core';\nimport {\n  AbstractControl, ControlValueAccessor, FormBuilder, FormControl,\n  FormGroup, FormGroupDirective, NG_VALIDATORS, NG_VALUE_ACCESSOR,\n  ValidationErrors, Validator, Validators\n} from '@angular/forms';\n\nimport {\n  GatewayService, GatewayServiceFactory, OnExecSuccess, RunService\n} from '@deja-vu/core';\n\nimport { PropertyRes, Property } from '../shared/property.model';\n\nimport { map, startWith } from 'rxjs/operators';\n\nimport * as Ajv from 'ajv';\n\nimport * as _ from 'lodash';\n\n\n@Pipe({ name: 'camelToTitleCase'})\nexport class CamelToTitleCasePipe implements PipeTransform {\n  transform(camelCase: string): string {\n    return _.startCase(_.camelCase(camelCase));\n  }\n}\n\n/**\n * Create a single property\n * You probably don't want to use this on its own and instead want Create Object\n */\n@Component({\n  selector: 'property-create-property',\n  templateUrl: './create-property.component.html',\n  styleUrls: ['./create-property.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: CreatePropertyComponent,\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: CreatePropertyComponent,\n      multi: true\n    }\n  ]\n})\nexport class CreatePropertyComponent\nimplements OnInit, OnChanges, ControlValueAccessor, Validator,\nOnExecSuccess {\n  /**\n   * The name of the property to create\n   * (should match a name in the schama the cliche is configured with)\n   */\n  @Input() name: string;\n  /**\n   * (Optional) default value to populate the input with\n   */\n  @Input() initialValue;\n  /**\n   * The value of the property created\n   */\n  @Output() value = new EventEmitter();\n\n  propertyControl: FormControl;\n  schemaErrors: string[];\n  required = false;\n  type;\n\n  private gs: GatewayService;\n  private schemaValidate;\n  private ajv = new Ajv();\n\n  constructor(\n    private elem: ElementRef, private rs: RunService,\n    private gsf: GatewayServiceFactory) {}\n\n  ngOnInit() {\n    this.gs = this.gsf.for(this.elem);\n    this.rs.register(this.elem, this);\n    this.loadSchema();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.name) {\n      this.loadSchema();\n    }\n  }\n\n  /**\n   * Get the JSON Schema object corresponding to the property being created.\n   *\n   * This is used for initializing the property form control with the required\n   * validators.\n   */\n  loadSchema() {\n    if (!this.gs || !this.name) {\n      return;\n    }\n    this.gs\n      .get<PropertyRes>('/graphql', {\n        params: {\n          inputs: { name: this.name },\n          extraInfo: {\n            returnFields: `\n              schema\n              required\n            `\n          }\n        }\n      })\n      .pipe(map((res: PropertyRes) => res.data.property))\n      .subscribe((property: Property) => {\n        const schema = JSON.parse(property.schema);\n        this.schemaValidate = this.ajv.compile(schema);\n        if (schema.type === 'integer' ||\n            schema.type === 'number') {\n          this.type = Number;\n        } else if (schema.type === 'string') {\n          this.type = String;\n        } else {\n          this.type = Boolean;\n        }\n        const validators = [this.schemaValidator.bind(this)];\n        if (property.required) {\n          this.required = true;\n          validators.push(Validators.required);\n        }\n        this.propertyControl = new FormControl('', validators);\n        this.propertyControl.setValue(this.initialValue);\n        this.propertyControl.valueChanges.subscribe((newValue) => {\n          this.value.emit(newValue);\n        });\n        this.propertyControl.valueChanges\n          .pipe(startWith(this.propertyControl.value));\n      });\n  }\n\n  schemaValidator(control: AbstractControl): {[key: string]: any} {\n    if (!this.schemaValidate || !control.value) {\n      return null;\n    }\n    const valid = this.schemaValidate(this.type(control.value));\n    if (!valid) {\n      this.schemaErrors = _\n        .map(this.schemaValidate.errors, (error) => error.message);\n\n      return {\n        schema: true\n      };\n    }\n\n    return null;\n  }\n\n  writeValue(value: any) {\n    if (!this.propertyControl) {\n      return;\n    }\n    if (value) {\n      this.propertyControl.setValue(value);\n    } else {\n      this.propertyControl.reset();\n    }\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this.value.subscribe(fn);\n  }\n\n  registerOnTouched() {}\n\n  validate(c: FormControl): ValidationErrors {\n    if (!this.propertyControl) {\n      return null;\n    }\n\n    return this.propertyControl.validator(this.propertyControl);\n  }\n\n  dvOnExecSuccess() {\n    this.propertyControl.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-property.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elem",
                        "type": "ElementRef"
                    },
                    {
                        "name": "rs",
                        "type": "RunService"
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory"
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rs",
                        "type": "RunService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "ControlValueAccessor",
                "Validator",
                "OnExecSuccess"
            ],
            "templateData": "<mat-form-field *ngIf=\"propertyControl\">\n  <mat-label>{{name | camelToTitleCase}}</mat-label>\n  <input matInput [formControl]=\"propertyControl\" [required]=\"required\">\n  <mat-error *ngIf=\"propertyControl.hasError('required')\">\n    {{name | camelToTitleCase}} is <strong>required</strong>\n  </mat-error>\n  <mat-error *ngIf=\"propertyControl.hasError('schema')\">\n    <ul *ngIf=\"schemaErrors.length > 1\">\n      <li *ngFor=\"let error of schemaErrors\">{{error}}</li>\n    </ul>\n    <span *ngIf=\"schemaErrors.length == 1\">\n      {{name | camelToTitleCase}} {{schemaErrors[0]}}\n    </span>\n  </mat-error>\n</mat-form-field>\n"
        },
        {
            "name": "ObjectAutocompleteComponent",
            "id": "component-ObjectAutocompleteComponent-fdc44ef520ef286e53914524aedd1d8e",
            "file": "src/app/property/object-autocomplete/object-autocomplete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "property-object-autocomplete",
            "styleUrls": [
                "./object-autocomplete.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./object-autocomplete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabledIds",
                    "defaultValue": "[]",
                    "description": "<p>List of object IDs for objects which cannot be chosen</p>\n",
                    "line": 68,
                    "type": "string[]"
                },
                {
                    "name": "initialObjectId",
                    "description": "<p>If given, the select input with the object with the given ID selected</p>\n",
                    "line": 96,
                    "type": "string"
                },
                {
                    "name": "notAnOptionErrorMsgFn",
                    "defaultValue": "((selectedId) => `\n    ${selectedId} is not a valid option`)",
                    "description": "<p>Function which takes an object ID corresponding to an object which is\nnot a valid option and returns text (which can use HTML) to show the the\nuser explaining the error</p>\n",
                    "line": 63
                },
                {
                    "name": "objectAutocompletePlaceholder",
                    "defaultValue": "'Choose One'",
                    "description": "<p>Text to show to prompt the user to choose an object.</p>\n",
                    "line": 44
                },
                {
                    "name": "required",
                    "defaultValue": "true",
                    "description": "<p>Whether or not choosing an object is required\n(if this is action is used in a larger form)</p>\n",
                    "line": 49
                },
                {
                    "name": "requiredErrorMsg",
                    "defaultValue": "`\n    This field is <strong>required</strong>\n  `",
                    "description": "<p>Text so show if the user tries to execute the action before selecting\nan object.\nHTML is supported here</p>\n",
                    "line": 55
                },
                {
                    "name": "showBaseUrlsOnly",
                    "defaultValue": "false",
                    "description": "<p>Passed to showObject action\n(For the default showObject, this will cause any URL properties\nto display without the protocol and path)</p>\n",
                    "line": 92,
                    "type": "boolean"
                },
                {
                    "name": "showExclude",
                    "description": "<p>List of property names to pass to showObject actoin\n(For the default showObject, this will cause\nthese properties to not be shown)</p>\n",
                    "line": 86,
                    "type": "string[]"
                },
                {
                    "name": "showObject",
                    "defaultValue": "{\n    type: <Type<Component>> ShowObjectComponent\n  }",
                    "description": "<p>Action to use to render each object</p>\n",
                    "line": 72,
                    "type": "Action"
                },
                {
                    "name": "showOnly",
                    "description": "<p>List of property names to pass to showObject actoin\n(For the default showObject, this will cause only\nthese properties to be shown)</p>\n",
                    "line": 80,
                    "type": "string[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "objects",
                    "defaultValue": "new EventEmitter<Object[]>()",
                    "description": "<p>All objects</p>\n",
                    "line": 103,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedObjectId",
                    "defaultValue": "new EventEmitter<string>()",
                    "description": "<p>The ID of the selected object</p>\n",
                    "line": 108,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_objects",
                    "defaultValue": "[]",
                    "type": "Object[]",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "_selectedObjectId",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl('', [\n    (c: AbstractControl): ValidationErrors => {\n      if (c.pristine) {\n        return null;\n      }\n      const selectedId = c.value;\n      if (this.required && !selectedId) {\n        return {required: selectedId};\n      }\n      if (!_.includes(this.ids, selectedId)) {\n        return {notAnOption: selectedId};\n      }\n\n      return null;\n    }\n  ])",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "errors",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "filteredObjects",
                    "type": "Observable<Object[]>",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "ids",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "objectAutocomplete",
                    "defaultValue": "this",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 130
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchObjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174
                },
                {
                    "name": "fetchProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string[]>",
                    "typeParameters": [],
                    "line": 159,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 203,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDisabled",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 212,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142
                },
                {
                    "name": "objectSelected",
                    "args": [
                        {
                            "name": "evt",
                            "type": "MatAutocompleteSelectedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "MatAutocompleteSelectedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "c",
                            "type": "FormControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors",
                    "typeParameters": [],
                    "line": 232,
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "FormControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Like Choose Object but instead of showing all objects in a list,\nthis allows the user to search for on object with some property value</p>\n",
            "rawdescription": "Like Choose Object but instead of showing all objects in a list,\nthis allows the user to search for on object with some property value",
            "type": "component",
            "sourceCode": "import {\n  Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, Type,\n  ViewChild\n} from '@angular/core';\nimport {\n  AbstractControl, ControlValueAccessor, FormBuilder, FormControl,\n  FormGroup, FormGroupDirective, NG_VALIDATORS, NG_VALUE_ACCESSOR,\n  ValidationErrors, Validator, Validators\n} from '@angular/forms';\n\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\n\nimport {Observable} from 'rxjs/Observable';\nimport { map } from 'rxjs/operators/map';\nimport { startWith } from 'rxjs/operators/startWith';\n\nimport * as _ from 'lodash';\n\nimport {\n  Action, GatewayService, GatewayServiceFactory, RunService\n} from '@deja-vu/core';\n\nimport { properties, Property } from '../shared/property.model';\n\nimport { ShowObjectComponent } from '../show-object/show-object.component';\n\nimport { API_PATH } from '../property.config';\n\n\n/**\n * Like Choose Object but instead of showing all objects in a list,\n * this allows the user to search for on object with some property value\n */\n@Component({\n  selector: 'property-object-autocomplete',\n  templateUrl: './object-autocomplete.component.html',\n  styleUrls: ['./object-autocomplete.component.css']\n})\nexport class ObjectAutocompleteComponent\nimplements OnInit, ControlValueAccessor, Validator {\n  /**\n   * Text to show to prompt the user to choose an object.\n   */\n  @Input() objectAutocompletePlaceholder = 'Choose One';\n  /**\n   * Whether or not choosing an object is required\n   * (if this is action is used in a larger form)\n   */\n  @Input() required = true;\n  /**\n   * Text so show if the user tries to execute the action before selecting\n   * an object.\n   * HTML is supported here\n   */\n  @Input() requiredErrorMsg = `\n    This field is <strong>required</strong>\n  `;\n  /**\n   * Function which takes an object ID corresponding to an object which is\n   * not a valid option and returns text (which can use HTML) to show the the\n   * user explaining the error\n   */\n  @Input() notAnOptionErrorMsgFn = ((selectedId) => `\n    ${selectedId} is not a valid option`);\n  /**\n   * List of object IDs for objects which cannot be chosen\n   */\n  @Input() disabledIds: string[] = [];\n  /**\n   * Action to use to render each object\n   */\n  @Input() showObject: Action = {\n    type: <Type<Component>> ShowObjectComponent\n  };\n  /**\n   * List of property names to pass to showObject actoin\n   * (For the default showObject, this will cause only\n   * these properties to be shown)\n   */\n  @Input() showOnly: string[];\n  /**\n   * List of property names to pass to showObject actoin\n   * (For the default showObject, this will cause\n   * these properties to not be shown)\n   */\n  @Input() showExclude: string[];\n  /**\n   * Passed to showObject action\n   * (For the default showObject, this will cause any URL properties\n   * to display without the protocol and path)\n   */\n  @Input() showBaseUrlsOnly: boolean = false;\n  /**\n   * If given, the select input with the object with the given ID selected\n   */\n  @Input() set initialObjectId(id: string) {\n    this._selectedObjectId = id;\n    this.selectedObjectId.emit(id);\n  }\n  /**\n   * All objects\n   */\n  @Output() objects = new EventEmitter<Object[]>();\n  _objects: Object[] = [];\n  /**\n   * The ID of the selected object\n   */\n  @Output() selectedObjectId = new EventEmitter<string>();\n\n  _selectedObjectId;\n  control: FormControl = new FormControl('', [\n    (c: AbstractControl): ValidationErrors => {\n      if (c.pristine) {\n        return null;\n      }\n      const selectedId = c.value;\n      if (this.required && !selectedId) {\n        return {required: selectedId};\n      }\n      if (!_.includes(this.ids, selectedId)) {\n        return {notAnOption: selectedId};\n      }\n\n      return null;\n    }\n  ]);\n\n  ids: string[] = [];\n  filteredObjects: Observable<Object[]>;\n  objectAutocomplete = this;\n\n  errors: any;\n\n  private properties: string[];\n  private gs: GatewayService;\n\n  constructor(\n    private elem: ElementRef, private gsf: GatewayServiceFactory,\n    private rs: RunService,\n    @Inject(API_PATH) private apiPath) {}\n\n  ngOnInit() {\n    this.gs = this.gsf.for(this.elem);\n    this.rs.register(this.elem, this);\n    this.load();\n  }\n\n  async load() {\n    if (!this.gs) {\n      return;\n    }\n    if (!this.properties) {\n      this.properties = properties(\n        this.showOnly, this.showExclude, await this.fetchProperties());\n    }\n    this.fetchObjects();\n  }\n\n  async fetchProperties(): Promise<string[]> {\n    const res = await this.gs\n      .get<{data: {properties: Property[]}}>(this.apiPath, {\n        params: {\n          extraInfo: {\n            action: 'properties',\n            returnFields: 'name'\n          }\n        }\n      })\n      .toPromise();\n\n    return _.map(res.data.properties, 'name');\n  }\n\n  fetchObjects() {\n    if (this.gs) {\n      this.gs\n        .get<{data: {objects: Object[]}}>(this.apiPath, {\n          params: {\n            extraInfo: {\n              action: 'objects',\n              returnFields: `\n                id\n                ${this.properties.join('\\n')}\n              `\n            }\n          }\n        })\n        .subscribe((res) => {\n          this._objects = res.data.objects;\n          this.objects.emit(this._objects);\n          this.ids = _.map(this._objects, 'id');\n          this.filteredObjects = this.control\n            .valueChanges\n            .pipe(startWith(''), map(this.filter.bind(this)));\n        });\n    }\n  }\n\n  objectSelected(evt: MatAutocompleteSelectedEvent) {\n    this.selectedObjectId.emit(evt.option.value);\n  }\n\n  filter(value: string): string[] {\n    if (_.isEmpty(value)) {\n      return this.ids;\n    }\n\n    return _.filter(this.ids, (id) => _\n      .includes(id.toLowerCase(), value.toLowerCase()));\n  }\n\n  isDisabled(id: string) {\n    return _.includes(this.disabledIds, id);\n  }\n\n  writeValue(value: string) {\n    if (value === null) {\n      this.control.reset();\n      this.control.markAsUntouched();\n      this.control.markAsPristine();\n    } else {\n      this.control.setValue(value);\n    }\n  }\n\n  registerOnChange(fn: (value: string) => void) {\n    this.selectedObjectId.subscribe(fn);\n  }\n\n  registerOnTouched() {}\n\n  validate(c: FormControl): ValidationErrors {\n    if (this.control.pristine) {\n      return null;\n    }\n\n    return this.control.errors;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./object-autocomplete.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elem",
                        "type": "ElementRef"
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory"
                    },
                    {
                        "name": "rs",
                        "type": "RunService"
                    },
                    {
                        "name": "apiPath",
                        "type": ""
                    }
                ],
                "line": 135,
                "jsdoctags": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rs",
                        "type": "RunService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiPath",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor",
                "Validator"
            ],
            "accessors": {
                "initialObjectId": {
                    "name": "initialObjectId",
                    "setSignature": {
                        "name": "initialObjectId",
                        "type": "void",
                        "args": [
                            {
                                "name": "id",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 96,
                        "description": "<p>If given, the select input with the object with the given ID selected</p>\n",
                        "jsdoctags": [
                            {
                                "name": "id",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<mat-form-field>\n  <input type=\"text\" [placeholder]=\"objectAutocompletePlaceholder\" matInput\n  [formControl]=\"control\" [matAutocomplete]=\"auto\" required>\n  <mat-autocomplete #auto=\"matAutocomplete\"\n    (optionSelected)=\"objectSelected($event)\">\n    <mat-option *ngFor=\"let object of _objects\" [value]=\"object.id\"\n      [disabled]=\"isDisabled(object.id)\">\n      <dv-include [action]=\"showObject\" default-showObject=\"{ tag: property-show-object }\" [inputs]=\"{\n          object: object, showOnly: showOnly, showExclude: showExclude,\n          properties: properties, showBaseUrlsOnly: showBaseUrlsOnly\n        }\"\n        [parent]=\"objectAutocomplete\">\n      </dv-include>\n    </mat-option>\n  </mat-autocomplete>\n  <mat-error *ngIf=\"control.hasError('required')\"\n    [innerHtml]=\"requiredErrorMsg\">\n  </mat-error>\n  <mat-error *ngIf=\"control.hasError('notAnOption')\"\n    [innerHtml]=\"notAnOptionErrorMsgFn(control.value)\">\n  </mat-error>\n</mat-form-field>\n"
        },
        {
            "name": "ShowObjectComponent",
            "id": "component-ShowObjectComponent-49dd6bdffdca4a7ce39567565e334b1b",
            "file": "src/app/property/show-object/show-object.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "property-show-object",
            "styleUrls": [
                "./show-object.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./show-object.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "description": "<p>The ID of the object to show</p>\n",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "object",
                    "description": "<p>The actual data of the object to show. Can be given instead of ID to avoid\nneeding to retrieve object data from the database that you already have</p>\n",
                    "line": 44,
                    "type": "any"
                },
                {
                    "name": "showBaseUrlsOnly",
                    "defaultValue": "false",
                    "description": "<p>Passed to showUrl\n(For the default showUrl, this will cause any URL properties\nto display without the protocol and path)</p>\n",
                    "line": 60,
                    "type": "boolean"
                },
                {
                    "name": "showExclude",
                    "description": "<p>List of property names.\nIf given, causes these properties to not be shown.</p>\n",
                    "line": 54,
                    "type": "string[]"
                },
                {
                    "name": "showOnly",
                    "description": "<p>List of property names.\nIf given, causes only these properties to be shown.</p>\n",
                    "line": 49,
                    "type": "string[]"
                },
                {
                    "name": "showUrl",
                    "defaultValue": "{\n    type: <Type<Component>> ShowUrlComponent\n  }",
                    "description": "<p>Action to use to show URL properties</p>\n",
                    "line": 33,
                    "type": "Action"
                }
            ],
            "outputsClass": [
                {
                    "name": "loadedObject",
                    "defaultValue": "new EventEmitter<any>()",
                    "description": "<p>The object being shown</p>\n",
                    "line": 64,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "propertySchemas",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "showObject",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "methodsClass": [
                {
                    "name": "dvOnEval",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "fetchProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string[]>",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isUrl",
                    "args": [
                        {
                            "name": "propName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 151,
                    "jsdoctags": [
                        {
                            "name": "propName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Displays an object</p>\n",
            "rawdescription": "Displays an object",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit, Component, ElementRef, EventEmitter, Inject, Input, OnChanges,\n  OnInit, Output, Type\n} from '@angular/core';\nimport {\n  Action,\n  GatewayService,\n  GatewayServiceFactory,\n  OnEval,\n  RunService\n} from '@deja-vu/core';\nimport * as _ from 'lodash';\n\nimport { properties, Property } from '../shared/property.model';\n\nimport { ShowUrlComponent } from '../show-url/show-url.component';\n\nimport { API_PATH } from '../property.config';\n\n/**\n * Displays an object\n */\n@Component({\n  selector: 'property-show-object',\n  templateUrl: './show-object.component.html',\n  styleUrls: ['./show-object.component.css']\n})\nexport class ShowObjectComponent implements AfterViewInit, OnEval, OnInit,\nOnChanges {\n  /**\n   * Action to use to show URL properties\n   */\n  @Input() showUrl: Action = {\n    type: <Type<Component>> ShowUrlComponent\n  };\n  /**\n   * The ID of the object to show\n   */\n  @Input() id: string;\n  /**\n   * The actual data of the object to show. Can be given instead of ID to avoid\n   * needing to retrieve object data from the database that you already have\n   */\n  @Input() object: any;\n  /**\n   * List of property names.\n   * If given, causes only these properties to be shown.\n   */\n  @Input() showOnly: string[];\n  /**\n   * List of property names.\n   * If given, causes these properties to not be shown.\n   */\n  @Input() showExclude: string[];\n  /**\n   * Passed to showUrl\n   * (For the default showUrl, this will cause any URL properties\n   * to display without the protocol and path)\n   */\n  @Input() showBaseUrlsOnly: boolean = false;\n  /**\n   * The object being shown\n   */\n  @Output() loadedObject = new EventEmitter<any>();\n\n  /**\n   * @ignore internal input\n   */\n  @Input() properties: string[];\n  propertySchemas: { [propName: string]: {\n    type: string,\n    format?: string\n  }} = {};\n\n  showObject;\n  private gs: GatewayService;\n\n  constructor(\n    private elem: ElementRef, private gsf: GatewayServiceFactory,\n    private rs: RunService, @Inject(API_PATH) private apiPath) {\n    this.showObject = this;\n  }\n\n  ngOnInit() {\n    this.gs = this.gsf.for(this.elem);\n    this.rs.register(this.elem, this);\n  }\n\n  ngAfterViewInit() {\n    this.load();\n  }\n\n  ngOnChanges() {\n    this.load();\n  }\n\n  async load() {\n    if (!this.gs) {\n      return;\n    }\n    if (!this.properties) {\n      this.properties = properties(\n        this.showOnly, this.showExclude, await this.fetchProperties());\n    }\n    if (this.canEval()) {\n      this.rs.eval(this.elem);\n    }\n  }\n\n  async dvOnEval(): Promise<void> {\n    if (this.canEval()) {\n      this.gs\n        .get<{data: {object: Object}}>(this.apiPath, {\n          params: {\n            inputs: { id: this.id },\n            extraInfo: {\n              action: 'object',\n              returnFields: `${this.properties.join('\\n')}`\n            }\n          }\n        })\n        .subscribe((res) => {\n          this.object = res.data.object;\n          this.loadedObject.emit(this.object);\n        });\n    }\n  }\n\n  async fetchProperties(): Promise<string[]> {\n    const res = await this.gs\n      .get<{data: {properties: Property[]}}>(this.apiPath, {\n        params: {\n          extraInfo: {\n            action: 'properties',\n            returnFields: `\n              name\n              schema\n            `\n          }\n        }\n      })\n      .toPromise();\n\n    const properties = res.data.properties;\n    _.forEach(properties, (prop) => {\n      this.propertySchemas[prop.name] = JSON.parse(prop.schema);\n    });\n    return _.map(properties, 'name');\n  }\n\n  isUrl(propName: string): boolean {\n    return this.propertySchemas[propName] &&\n      this.propertySchemas[propName].type === 'string' &&\n      this.propertySchemas[propName].format === 'url';\n  }\n\n  private canEval(): boolean {\n    return !!(!this.object && this.id && this.properties && this.gs);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./show-object.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elem",
                        "type": "ElementRef"
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory"
                    },
                    {
                        "name": "rs",
                        "type": "RunService"
                    },
                    {
                        "name": "apiPath",
                        "type": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rs",
                        "type": "RunService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiPath",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnEval",
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div *ngIf=\"object\" class=\"property-show-object\">\n  <div *ngFor=\"let prop of properties\" class=\"property-show-object-property\">\n    <span *ngIf=\"isUrl(prop)\">\n      <dv-include [action]=\"showUrl\"\n        default-showUrl=\"{ tag: property-show-url }\"\n        [inputs]=\"{\n          url: object[prop], showBaseUrlOnly: showBaseUrlsOnly\n        }\"\n        [parent]=\"showObject\">\n      </dv-include>\n    </span>\n    <span *ngIf=\"!isUrl(prop)\">\n      {{object[prop]}}\n    </span>\n  </div>\n</div>\n"
        },
        {
            "name": "ShowObjectsComponent",
            "id": "component-ShowObjectsComponent-0c9ce5892b90d82f79d856d3c5b69110",
            "file": "src/app/property/show-objects/show-objects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "property-show-objects",
            "styleUrls": [
                "./show-objects.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./show-objects.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "noObjectsToShowText",
                    "defaultValue": "'No objects'",
                    "description": "<p>Text to display when there are no objects</p>\n",
                    "line": 34
                },
                {
                    "name": "showBaseUrlsOnly",
                    "defaultValue": "false",
                    "description": "<p>Passed to showObject action\n(For the default showObject, this will cause any URL properties\nto display without the protocol and path)</p>\n",
                    "line": 59,
                    "type": "boolean"
                },
                {
                    "name": "showExclude",
                    "description": "<p>List of property names to pass to showObject actoin\n(For the default showObject, this will cause\nthese properties to not be shown)</p>\n",
                    "line": 53,
                    "type": "string[]"
                },
                {
                    "name": "showObject",
                    "defaultValue": "{\n    type: <Type<Component>> ShowObjectComponent\n  }",
                    "description": "<p>Action to use to render each object</p>\n",
                    "line": 38,
                    "type": "Action"
                },
                {
                    "name": "showOnly",
                    "description": "<p>List of property names to pass to showObject actoin\n(For the default showObject, this will cause only\nthese properties to be shown)</p>\n",
                    "line": 47,
                    "type": "string[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "objectIds",
                    "defaultValue": "new EventEmitter<string[]>()",
                    "description": "<p>Just the IDs of the outputted objects</p>\n",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "objects",
                    "defaultValue": "new EventEmitter<Object[]>()",
                    "description": "<p>All objects</p>\n",
                    "line": 63,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_objects",
                    "defaultValue": "[]",
                    "type": "Object[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "properties",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "showObjects",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "dvOnEval",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 105,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "fetchProperties",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string[]>",
                    "typeParameters": [],
                    "line": 127,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Display all objects</p>\n",
            "rawdescription": "Display all objects",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit, Component, ElementRef, EventEmitter, Inject, Input, OnChanges,\n  OnInit, Output, Type\n} from '@angular/core';\nimport {\n  Action,\n  GatewayService,\n  GatewayServiceFactory,\n  OnEval,\n  RunService\n} from '@deja-vu/core';\nimport * as _ from 'lodash';\n\nimport { properties, Property } from '../shared/property.model';\n\nimport { ShowObjectComponent } from '../show-object/show-object.component';\n\nimport { API_PATH } from '../property.config';\n\n\n/**\n * Display all objects\n */\n@Component({\n  selector: 'property-show-objects',\n  templateUrl: './show-objects.component.html',\n  styleUrls: ['./show-objects.component.css']\n})\nexport class ShowObjectsComponent implements AfterViewInit, OnEval, OnInit,\nOnChanges {\n  /**\n   * Text to display when there are no objects\n   */\n  @Input() noObjectsToShowText = 'No objects';\n  /**\n   * Action to use to render each object\n   */\n  @Input() showObject: Action = {\n    type: <Type<Component>> ShowObjectComponent\n  };\n  _objects: Object[] = [];\n  /**\n   * List of property names to pass to showObject actoin\n   * (For the default showObject, this will cause only\n   * these properties to be shown)\n   */\n  @Input() showOnly: string[];\n  /**\n   * List of property names to pass to showObject actoin\n   * (For the default showObject, this will cause\n   * these properties to not be shown)\n   */\n  @Input() showExclude: string[];\n  /**\n   * Passed to showObject action\n   * (For the default showObject, this will cause any URL properties\n   * to display without the protocol and path)\n   */\n  @Input() showBaseUrlsOnly: boolean = false;\n  /**\n   * All objects\n   */\n  @Output() objects = new EventEmitter<Object[]>();\n  /**\n   * Just the IDs of the outputted objects\n   */\n  @Output() objectIds = new EventEmitter<string[]>();\n\n  properties: string[];\n  showObjects;\n  private gs: GatewayService;\n\n  constructor(\n    private elem: ElementRef, private gsf: GatewayServiceFactory,\n    private rs: RunService, @Inject(API_PATH) private apiPath) {\n    this.showObjects = this;\n  }\n\n  ngOnInit() {\n    this.gs = this.gsf.for(this.elem);\n    this.rs.register(this.elem, this);\n  }\n\n  ngAfterViewInit() {\n    this.load();\n  }\n\n  ngOnChanges() {\n    this.load();\n  }\n\n  async load() {\n    if (!this.gs) {\n      return;\n    }\n    if (!this.properties) {\n      this.properties = properties(\n        this.showOnly, this.showExclude, await this.fetchProperties());\n    }\n    if (this.canEval()) {\n      this.rs.eval(this.elem);\n    }\n  }\n\n  async dvOnEval(): Promise<void> {\n    if (this.canEval()) {\n      this.gs\n        .get<{data: {objects: Object[]}}>(this.apiPath, {\n          params: {\n            extraInfo: {\n              action: 'objects',\n              returnFields: `\n                id\n                ${this.properties.join('\\n')}\n              `\n            }\n          }\n        })\n        .subscribe((res) => {\n          this._objects = res.data.objects;\n          this.objects.emit(this._objects);\n          this.objectIds.emit(_.map(this._objects, 'id'));\n        });\n    }\n  }\n\n  async fetchProperties(): Promise<string[]> {\n    const res = await this.gs\n      .get<{data: {properties: Property[]}}>(this.apiPath, {\n        params: {\n          extraInfo: {\n            action: 'properties',\n            returnFields: 'name'\n          }\n        }\n      })\n      .toPromise();\n\n    return _.map(res.data.properties, 'name');\n  }\n\n  private canEval(): boolean {\n    return !!(this.properties && this.gs);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./show-objects.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elem",
                        "type": "ElementRef"
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory"
                    },
                    {
                        "name": "rs",
                        "type": "RunService"
                    },
                    {
                        "name": "apiPath",
                        "type": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gsf",
                        "type": "GatewayServiceFactory",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rs",
                        "type": "RunService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiPath",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnEval",
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ul *ngIf=\"_objects && _objects.length > 0\" class=\"list-group\">\n  <li *ngFor=\"let object of _objects\"\n    class=\"list-group-item property-show-objects-object-item\">\n    <dv-include [action]=\"showObject\"\n      default-showObject=\"{ tag: property-show-object }\" [inputs]=\"{\n        object: object, showOnly: showOnly, showExclude: showExclude,\n        showBaseUrlsOnly: showBaseUrlsOnly\n      }\"\n      [parent]=\"showObjects\">\n    </dv-include>\n  </li>\n</ul>\n<div *ngIf=\"!_objects || _objects.length === 0\">\n  {{ noObjectsToShowText }}\n</div>\n"
        },
        {
            "name": "ShowUrlComponent",
            "id": "component-ShowUrlComponent-6cd8d12272285d57c61d54ef2f37d9b1",
            "file": "src/app/property/show-url/show-url.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "property-show-url",
            "styleUrls": [
                "./show-url.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./show-url.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showBaseUrlOnly",
                    "defaultValue": "false",
                    "description": "<p>If false, show the whole URL. If true, show the URL without the\nprotocol and path</p>\n",
                    "line": 68,
                    "type": "boolean"
                },
                {
                    "name": "url",
                    "description": "<p>The URL to display</p>\n",
                    "line": 63,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getBaseUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Display a URL property</p>\n",
            "rawdescription": "Display a URL property",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n\n// from https://gist.github.com/dperini/729294\n// which is used by ajv to validate \"format\": \"url\" fields\nconst URL_REGEX = new RegExp(\n  \"^\" +\n    // protocol identifier (optional)\n    // short syntax // still required\n    \"(?:(?:(?:https?|ftp):)?\\\\/\\\\/)\" +\n    // capturing group to get base url\n    \"(\" +\n      // user:pass BasicAuth (optional)\n      \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n      \"(?:\" +\n        // IP address exclusion\n        // private & local networks\n        \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\n        \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\n        \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\n        // IP address dotted notation octets\n        // excludes loopback network 0.0.0.0\n        // excludes reserved space >= 224.0.0.0\n        // excludes network & broacast addresses\n        // (first & last IP address of each class)\n        \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n        \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n        \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n      \"|\" +\n        // host & domain names, may end with dot\n        // can be replaced by a shortest alternative\n        // (?![-_])(?:[-\\\\w\\\\u00a1-\\\\uffff]{0,63}[^-_]\\\\.)+\n        \"(?:\" +\n          \"(?:\" +\n            \"[a-z0-9\\\\u00a1-\\\\uffff]\" +\n            \"[a-z0-9\\\\u00a1-\\\\uffff_-]{0,62}\" +\n          \")?\" +\n          \"[a-z0-9\\\\u00a1-\\\\uffff]\\\\.\" +\n        \")+\" +\n        // TLD identifier name, may end with dot\n        \"(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?)\" +\n      \")\" +\n      // port number (optional)\n      \"(?::\\\\d{2,5})?\" +\n    \")\" +\n    // resource path (optional)\n    \"(?:[/?#]\\\\S*)?\" +\n  \"$\", \"i\"\n);\n\n/**\n * Display a URL property\n */\n@Component({\n  selector: 'property-show-url',\n  templateUrl: './show-url.component.html',\n  styleUrls: ['./show-url.component.css']\n})\nexport class ShowUrlComponent {\n  /**\n   * The URL to display\n   */\n  @Input() url: string;\n  /**\n   * If false, show the whole URL. If true, show the URL without the\n   * protocol and path\n   */\n  @Input() showBaseUrlOnly: boolean = false;\n\n  getBaseUrl(url: string): string {\n    const baseUrlGroupIndex = 1;\n    const groups = url.match(URL_REGEX);\n    return (groups && groups.length > baseUrlGroupIndex) ?\n      groups[baseUrlGroupIndex] : '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./show-url.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<span *ngIf=\"url\">{{showBaseUrlOnly ? getBaseUrl(url) : url}}</span>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PropertyModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PropertyModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "allComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/property/property.metadata.ts",
                "type": "[]",
                "defaultValue": "[\n  ChooseObjectComponent, CreateObjectComponent, CreateObjectsComponent,\n  CreatePropertyComponent, ObjectAutocompleteComponent,\n  ShowObjectComponent, ShowObjectsComponent, ShowUrlComponent\n]"
            },
            {
                "name": "API_PATH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/property/property.config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<string>('api.path')"
            },
            {
                "name": "buildConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/property/testing/testbed.config.ts",
                "type": "",
                "defaultValue": "getConfigBuilder(API_PATH, metadata)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/property/testing/testbed.config.ts",
                "type": "",
                "defaultValue": "buildConfig(null, null, {})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "metadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/property/property.metadata.ts",
                "type": "object",
                "defaultValue": "{\n  imports: [\n    CommonModule,\n    DvModule,\n    FormsModule, ReactiveFormsModule,\n    BrowserAnimationsModule,\n    // Material\n    MatAutocompleteModule, MatButtonModule, MatInputModule, MatFormFieldModule,\n    MatSelectModule\n  ],\n  declarations: [...allComponents, CamelToTitleCasePipe],\n  entryComponents: allComponents,\n  exports: [...allComponents, CamelToTitleCasePipe]\n}"
            },
            {
                "name": "SAVED_MSG_TIMEOUT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/property/create-objects/create-objects.component.ts",
                "type": "number",
                "defaultValue": "3000"
            },
            {
                "name": "SAVED_MSG_TIMEOUT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/property/create-object/create-object.component.ts",
                "type": "number",
                "defaultValue": "3000"
            },
            {
                "name": "URL_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/property/show-url/show-url.component.ts",
                "type": "",
                "defaultValue": "new RegExp(\n  \"^\" +\n    // protocol identifier (optional)\n    // short syntax // still required\n    \"(?:(?:(?:https?|ftp):)?\\\\/\\\\/)\" +\n    // capturing group to get base url\n    \"(\" +\n      // user:pass BasicAuth (optional)\n      \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n      \"(?:\" +\n        // IP address exclusion\n        // private & local networks\n        \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\n        \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\n        \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\n        // IP address dotted notation octets\n        // excludes loopback network 0.0.0.0\n        // excludes reserved space >= 224.0.0.0\n        // excludes network & broacast addresses\n        // (first & last IP address of each class)\n        \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n        \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n        \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n      \"|\" +\n        // host & domain names, may end with dot\n        // can be replaced by a shortest alternative\n        // (?![-_])(?:[-\\\\w\\\\u00a1-\\\\uffff]{0,63}[^-_]\\\\.)+\n        \"(?:\" +\n          \"(?:\" +\n            \"[a-z0-9\\\\u00a1-\\\\uffff]\" +\n            \"[a-z0-9\\\\u00a1-\\\\uffff_-]{0,62}\" +\n          \")?\" +\n          \"[a-z0-9\\\\u00a1-\\\\uffff]\\\\.\" +\n        \")+\" +\n        // TLD identifier name, may end with dot\n        \"(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?)\" +\n      \")\" +\n      // port number (optional)\n      \"(?::\\\\d{2,5})?\" +\n    \")\" +\n    // resource path (optional)\n    \"(?:[/?#]\\\\S*)?\" +\n  \"$\", \"i\"\n)"
            }
        ],
        "functions": [
            {
                "name": "properties",
                "file": "src/app/property/shared/property.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "showOnly"
                    },
                    {
                        "name": "showExclude"
                    },
                    {
                        "name": "propertyNames"
                    }
                ],
                "returnType": "string[]",
                "jsdoctags": [
                    {
                        "name": "showOnly",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "showExclude",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propertyNames",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/property/property.metadata.ts": [
                {
                    "name": "allComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/property/property.metadata.ts",
                    "type": "[]",
                    "defaultValue": "[\n  ChooseObjectComponent, CreateObjectComponent, CreateObjectsComponent,\n  CreatePropertyComponent, ObjectAutocompleteComponent,\n  ShowObjectComponent, ShowObjectsComponent, ShowUrlComponent\n]"
                },
                {
                    "name": "metadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/property/property.metadata.ts",
                    "type": "object",
                    "defaultValue": "{\n  imports: [\n    CommonModule,\n    DvModule,\n    FormsModule, ReactiveFormsModule,\n    BrowserAnimationsModule,\n    // Material\n    MatAutocompleteModule, MatButtonModule, MatInputModule, MatFormFieldModule,\n    MatSelectModule\n  ],\n  declarations: [...allComponents, CamelToTitleCasePipe],\n  entryComponents: allComponents,\n  exports: [...allComponents, CamelToTitleCasePipe]\n}"
                }
            ],
            "src/app/property/property.config.ts": [
                {
                    "name": "API_PATH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/property/property.config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('api.path')"
                }
            ],
            "src/app/property/testing/testbed.config.ts": [
                {
                    "name": "buildConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/property/testing/testbed.config.ts",
                    "type": "",
                    "defaultValue": "getConfigBuilder(API_PATH, metadata)"
                },
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/property/testing/testbed.config.ts",
                    "type": "",
                    "defaultValue": "buildConfig(null, null, {})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/property/create-objects/create-objects.component.ts": [
                {
                    "name": "SAVED_MSG_TIMEOUT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/property/create-objects/create-objects.component.ts",
                    "type": "number",
                    "defaultValue": "3000"
                }
            ],
            "src/app/property/create-object/create-object.component.ts": [
                {
                    "name": "SAVED_MSG_TIMEOUT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/property/create-object/create-object.component.ts",
                    "type": "number",
                    "defaultValue": "3000"
                }
            ],
            "src/app/property/show-url/show-url.component.ts": [
                {
                    "name": "URL_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/property/show-url/show-url.component.ts",
                    "type": "",
                    "defaultValue": "new RegExp(\n  \"^\" +\n    // protocol identifier (optional)\n    // short syntax // still required\n    \"(?:(?:(?:https?|ftp):)?\\\\/\\\\/)\" +\n    // capturing group to get base url\n    \"(\" +\n      // user:pass BasicAuth (optional)\n      \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n      \"(?:\" +\n        // IP address exclusion\n        // private & local networks\n        \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\n        \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\n        \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\n        // IP address dotted notation octets\n        // excludes loopback network 0.0.0.0\n        // excludes reserved space >= 224.0.0.0\n        // excludes network & broacast addresses\n        // (first & last IP address of each class)\n        \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n        \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n        \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n      \"|\" +\n        // host & domain names, may end with dot\n        // can be replaced by a shortest alternative\n        // (?![-_])(?:[-\\\\w\\\\u00a1-\\\\uffff]{0,63}[^-_]\\\\.)+\n        \"(?:\" +\n          \"(?:\" +\n            \"[a-z0-9\\\\u00a1-\\\\uffff]\" +\n            \"[a-z0-9\\\\u00a1-\\\\uffff_-]{0,62}\" +\n          \")?\" +\n          \"[a-z0-9\\\\u00a1-\\\\uffff]\\\\.\" +\n        \")+\" +\n        // TLD identifier name, may end with dot\n        \"(?:[a-z\\\\u00a1-\\\\uffff]{2,}\\\\.?)\" +\n      \")\" +\n      // port number (optional)\n      \"(?::\\\\d{2,5})?\" +\n    \")\" +\n    // resource path (optional)\n    \"(?:[/?#]\\\\S*)?\" +\n  \"$\", \"i\"\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/property/shared/property.model.ts": [
                {
                    "name": "properties",
                    "file": "src/app/property/shared/property.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "showOnly"
                        },
                        {
                            "name": "showExclude"
                        },
                        {
                            "name": "propertyNames"
                        }
                    ],
                    "returnType": "string[]",
                    "jsdoctags": [
                        {
                            "name": "showOnly",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showExclude",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propertyNames",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {}
}