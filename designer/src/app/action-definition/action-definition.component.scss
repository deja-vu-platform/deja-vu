$row-control-width: 32px; // we need this fixed for the pseudo background
$main-view-padding: 24px;

// the region outside of the page
#main-view {
  width: 100%;
  background: darkgray;
  padding: $main-view-padding;
  padding-left: 0; // because there is the offpage button on the left
  position: relative;
  .parent-refs {
    position: absolute;
    right: 0;
    top: $main-view-padding;
  }
}

#page {
  width: 100%;
  min-height: 100vh; // will exceed its parent a bit
  display: flex;
  flex-direction: column;
  // put a white background behind the page
  // (in case they set the background to something transparent)
  position: relative;
  box-sizing: content-box;
  z-index: 0;
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: $row-control-width;
    bottom: 0;
    right: 0;
    background: white;
    z-index: -1;
  }
}

// contains both the control ("offpage") and content
.row-container {
  display: flex;
  &:hover {
    // override global
    box-shadow: none !important;
  }
}

// looks like it's outside of the page
.row-control {
  width: $row-control-width;
  button {
    padding: 0 4px;
    width: 100%;
  }
}

.grab {
  cursor: grab;
}

.hide-row {
  visibility: hidden;
  cursor: pointer;
}

// the content on the page
.dvd-row {
  flex: 1;
  display: flex;
}
// dvd-row has "page" styles applied to it which we must override sometimes
.row-container:not(:first-child) .dvd-row {
  border-top: none !important;
  padding-top: 0 !important;
}
.row-container:not(:last-child) .dvd-row {
  border-bottom: 1px dashed rgba(0, 0, 0, 0.2) !important;
  padding-bottom: 0 !important;
}

// we have a giant invisible last row for dragging content into
.row-container:last-child {
  flex: 1;
  .row-control {
    visibility: hidden;
  }
}

.action {
  display: grid;
  grid-template-columns: auto 1fr auto;
  grid-auto-rows: 1fr;
  .instance-container {
    grid-column: 2;
    // grid-row: 1 / -1 does not work so we set the row span in ngStyle
    // start with invisible border to avoid shifts on hover
    border: 3px solid rgba(255,255,255,0);
    border-radius: 5px;
  }
  .input-ref-indicator {
    grid-column: 1;
    justify-self: end;
  }
  .output-ref-indicator {
    grid-column: 3;
    justify-self: start;
  }
  &:hover {
    // override global
    box-shadow: none !important;
    .instance-container {
      // reapply global
      box-shadow: inset 0 0 100px 100px rgba(0,0,0,.15);
      // show bounds of action
      border-color:rgba(16, 219, 255, .5);
    }
  }
}

.popup-menu {
  height: 250px;
  width: 256px; // chosen emperically
  mat-form-field {
    width: 100%;
  }
}
.row-menu, .inputtables {
  padding: 16px;
}

// need clickable area for menu
.instance-container {
  min-height: 25px;
  min-width: 150px;
}

// text showing where invisible actions are
.hint {
  color: rgba(0,0,0,.25);
}

mat-tab-group {
  padding: 0;
}

mat-tab {
  height: 100%;
}

mat-checkbox {
  display: block;
  margin: 8px;
}

.no-drag {
  cursor: default;
}

.ref-for-io {
  font-size: 50%;
  transform: translateY(4px);
  -webkit-text-stroke-width: 0.2px;
  -webkit-text-stroke-color: var(--text-stroke-color);
}

.ref-io-name {
  -webkit-text-stroke-width: 0.4px;
  -webkit-text-stroke-color: var(--text-stroke-color);
}
