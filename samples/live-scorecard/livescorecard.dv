// Enables climbers to log their climbs and for others to view the 
// results in real-time.
app LiveScorecard {
    /** Neccessary Cliches **/
    // Grants access to content based on permissions.
    include access/Authorization [
        Host for Principal
    ] as HostAuthorization

    include access/Authorization [
        Climber for Principal
    ] as ClimberAuthorization

    include access/Authorization [
        Spectator for Principal
    ] as SpectatorAuthorization

    // Only a host can create an account and login the traditional way,
    // i.e. using a username and password. 
   include access/StandardAuthentication [
        Host for User
    ] as HostAuthentication

    // A climber can access his/her account using a climber code and
    // competition code.
    include access/PasskeyAuthentication [
        Climber for Passkey
    ] as ClimberAuthentication

    // A spectator can view the live leaderboard using a competition code.
    // TODO: Since a competition has only one code, should we consider 
    // Competition to be the passkey?
    include access/PasskeyAuthentication [
        Spectator for Passkey
    ] as SpectatorAuthentication

    // Competitions are created by a host. Climbers participate in them and
    // spectators view its results.
    include organization/Event [
        Competition for Event,
        ShowAndEditCompetition replacing ShowEvent in ShowEvents
    ]

    // Climbers have to complete climbs of various difficulties to score points.
    include organization/Task [
        Climb for Task,
        Host for Assigner,
        Climber for Assignee,
        ShowAndEditClimb replacing ShowTask in ShowUncompletedTasks,
        ShowAndEditClimb replacing ShowTask in ShowApprovedTasks
    ]

    // For every competition, there is a set of climbers.
    include organization/Group [
        Climber for Member,
        CompetitionParticipants for Group,
        ShowClimber replacing ShowNameOfMember in ShowMembersOfGroup
    ] as CompetitionClimbers

    // For every competition, there is a set of hosts.
    include organization/Group [
        Host for Member,
        Competition for Group
    ] as CompetitionHosts

    /** Entities **/
    data Host {
        name: text,
        username: text
    }

    data Climber {
        name: text,
        code: text
    }

    data Spectator {
        code: text
    }

    // added members to see if it would help
    data Competition { 
        name: text,
        code: text,
        members: [Host] 
    }

    // added this to see if it would help
    data CompetitionParticipants { 
        name: text,
        members: [Climber] 
    }

    // A climb is a task that is assigned by a host to all climbers
    // in the competition.
    // The name is the climb number set by hosts to make it easier for
    // climbers to identify and log their climbs.
    data Climb {
        name: text
    }

    /** Widgets **/
    // Displays buttons to choose appropriate form.
    main widget Landing { }

    // The login form for the hosts
    widget HostLogin {
        on_host_ok: Widget = HostHome
    }

    // The register form for the hosts
    widget HostRegister {
        on_host_ok: Widget = HostHome
    }    

    // Allows hosts to add competitions, climbers and other hosts.
    // Also, allows hosts to view the leaderboard.
    widget HostHome {
        host: Host,
        new_competition: Competition,
        new_spectator: Spectator
    }

    // The navigation bar for the hosts' view
    widget HostNavBar { 
        on_signout_ok: Widget = Landing
    }

    // The login form for the climbers
    widget ClimberLogin {
        on_climber_ok: Widget = ClimberHome
    }

    // Allows climbers to view available climbs, log climbs and view the 
    // leaderboard.
    // Also, allows other climbers to use the buddy log.
    widget ClimberHome {
        climber: Climber,
        climb: Climb
    }

    // The navigation bar for the climber's view.
    widget ClimberNavBar {
        climber: Climber,
        on_signout_ok: Widget = Landing
    }
    
    // Allows climbers to view available climbs, log climbs and view the 
    // leaderboard.
    // Signing out returns it to the original climber's account.
    widget BuddyHome {
        buddy: Climber,
        climb: Climb,
        on_signout_ok: Widget = ClimberHome
    }

    widget BuddyLogin {
        climber: Climber,
        on_login_ok: Widget = BuddyHome
    }

    // The login form for spectators
    widget SpectatorLogin {
        on_spectator_ok: Widget = SpectatorHome
    }

    // Allows spectators to view the leaderboard.
    widget SpectatorHome {
        spectator: Spectator,
        on_signout_ok: Widget = Landing
    }
    
    // A climber can only complete a climb after receiving approval by
    // another climber, NOT a host or the climber him/herself.
    widget ShowAndLogClimb {
        climb: Climb
    }

    // Allows the host to create a competition
    widget AddCompetitionForm {
        new_competition: Competition,
        new_climber_group: CompetitionParticipants,
        new_spectator: Spectator,
        host: Host,
        submit_ok: boolean
    }

    // A host can add other individuals to co-host the competition.
    // The host can also view the other co-hosts for the competition.
    widget ShowAndEditHosts {
        competition: Competition,
        newHost: Host
    }

    // A host can add, view and edit climbers to or of the competition.
    widget ShowAndEditClimbers {
        competition: Competition,
        participants: CompetitionParticipants,
        new_climber: Climber
    }

    widget ShowClimber {
        competition: Competition,
        climber: Climber
    }

    // A host can add a climber to the competition.
    widget AddClimber {
        new_climber: Climber,        
        competition: Competition
    }

    // A host can add, view and edit climbs to or of a competition.
    widget ShowAndEditClimb {
        new_climb: Climb, 
        host: Host,
        climber: Climber
    }

    // A host can add a climb to a competition.
    widget AddClimb {
        host: Host
    }

    widget ShowAndEditCompetition {
        competition: Competition,
        host: Host,
        linkToHosts: Widget = ShowAndEditHosts
    }

    /** Routes **/
    host_login_route: route = {path: "host-login", widget: HostLogin}
    host_register_route: route = {path: "host-register", widget: HostRegister}
    host_home_route: route = {path: "host", widget: HostHome}
    show_hosts_route: route = {path: "competition-hosts", widget: ShowAndEditHosts}
    show_participants_route: route = {path: "participants", widget: ShowAndEditClimbers}
    climber_login_route: route = {path: "climber-login", widget: ClimberLogin}
    climber_home_route: route = {path: "climber", widget: ClimberHome}
    buddy_home_route: route = {path: "buddy", widget: BuddyHome}
    spectator_login_route: route = {path: "spectator-login", widget: SpectatorLogin}
    spectator_home_route: route = {path: "spectator", widget: SpectatorHome}
}