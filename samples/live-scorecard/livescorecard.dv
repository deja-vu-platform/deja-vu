// Enables climbers to log their climbs and for others to view the 
// results in real-time.
app LiveScorecard {
    /** Neccessary Cliches **/
    // Grants access to content based on permissions.
    include access/Authorization [
        User for User
    ]

    // Only a host can create an account and login the traditional way,
    // i.e. using a username and password. 
    include access/StandardAuthentication [
        Host for User
    ] as HostAuthentication

    // A climber can access his/her account using a climber code and
    // competition code.
    include access/PasskeyAuthetication [
        Climber for User
    ] as ClimberAuthentication

    // A spectator can view the live leaderboard using a competition code.
    include access/PasskeyAuthetication [
        Spectator for User
    ] as SpectatorAuthentication

    // Competitions are created by a host. Climbers participate in them and
    // spectators view its results.
    include organization/Event [
        Competition for Event
    ]

    // Climbers have to complete climbs of various difficulties to score points.
    include organization/Task [
        Climb as Task,
        Host for Assigner,
        Climber for Assignee
    ]

    // For every competition, there is a set of climbers.
    include organization/Group [
        Climber for Member,
        Competition for Group,
        ShowClimbers replacing ShowNameOfGroup in ShowGroupsByMember
    ] as CompetitionClimbers

    // For every competition, there is a set of hosts.
    include organization/Group [
        Host for Member,
        Competition for Group,
        ShowHosts replacing ShowNameOfGroup in ShowGroupsByMember
    ] as CompetitionHosts

    /** Entities **/
    data User {
        username: text
    }

    data Host {
        name: text,
        username: text
    }

    // Climbers can be filtered by sex and experience level.
    data Climber {
        name: text,
        username: text,
        sex: text,
        level: text
    }

    data Spectator {
        username: text
    }

    data Competition { 
        code: text,
        hosts: [Host] 
    }

    // A climb is a task that is assigned by a host to all climbers
    // in the competition.
    // The climb number is a label set by hosts to make it easier for
    // climbers to log their climbs.
    // falls represents the number of times a climber has fallen during
    // a climb, not the total number of falls of all climbers for that climb.
    // Climbs can be sorted by climb number and number of points, and
    // filtered by level of difficulty.
    data Climb {
        climb_number: number,
        difficulty: text,
        points: number,
        falls: number
    }

    /** Widgets **/
    // Displays login/register forms for hosts and 
    // login forms for climbers and spectators.
    main widget Landing {
        on_host_ok: Widget = HostHome,
        on_climber_ok: Widget = ClimberHome,
        on_spectator_ok: Widget = SpectatorHome
    }

    // Allows hosts to add competitions, climbers and other hosts.
    // Also, allows hosts to view the leaderboard.
    widget HostHome {
        host: Host,
        to_leaderboard: Widget = ShowClimbers,
        on_signout: Widget = Landing
    }

    // Allows climbers to view available climbs, log climbs and view the 
    // leaderboard.
    // Also, allows other climbers to use the buddy log.
    widget ClimberHome {
        climber: Climber,
        on_buddy_log_ok: Widget = BuddyHome,
        to_leaderboard: Widget = ShowClimbers,
        on_signout: Widget = Landing
    }
    
    // Allows climbers to view available climbs, log climbs and view the 
    // leaderboard.
    // Signing out returns it to the original climber's account.
    widget BuddyHome {
        buddy: Climber,
        on_signout: ClimberHome
    }

    // Allows spectators to view the leaderboard.
    widget SpectatorHome {
        spectator: Spectator,
        to_leaderboard: Widget = ShowClimbers,
        on_signout: Widget = Landing
    }

    // A host can add other individuals to co-host the competition.
    // The email must be associated with a host account.
    widget AddHost { 
        email: text
    }
    
    // A climber can only complete a climb after receiving approval by
    // another climber, NOT a host or the climber him/herself.
    // The climber must log the number of times he/she fell during the climb.
    widget LogClimb {
        climb: Climb,
        falls: number,
        approver: Climber
    }

    // Can also be used for the leaderboard.
    widget ShowClimbers {
        competition: Competition,
        climber: Climber
    }

    // Can also be used for the leaderboard
    widget ShowHosts {
        competition: Competition,
        host: Host
    }

    /** Routes **/
    host_home_route: route = {path: "host-home", widget: HostHome}
    climber_home_route: route = {path: "climber-home", widget: ClimberHome}
    buddy_home_route: route = {path: "buddy-home", widget: BuddyHome}
    spectator_home_route: route = {path: "spectator-home", widget: SpectatorHome}
    leaderboard: route = {path: "leaderboard", widget: Leaderboard}
}
