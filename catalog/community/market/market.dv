// Exchange goods for money
// The current version of this clich√© doesn't allow multiple sellers for the
// same good
cliche Market {
  /** Entities **/
  // A buyer or seller that participates in markets
  // balances are global (not tied to one market)
  data Party {
    balance: number
  }

  // Each good is tied to a single seller and market
  data Good {
    name: text,
    price: number,
    seller: Party,
    supply: number,
    market: Market
  }

  // A record of a purchase/sale in the marketplace
  // [buyer] bought [quantity] [good]s from [seller] for $[price] each
  // Its status can be:
  //    unpaid   - where each good is reserved for the buyer
  //    paid     - where each good has been paid for
  //    canceled - where each good is neither reserved nor paid for
  data Transaction {
    good: Good,
    buyer: Party,
    seller: Party,
    price: number,
    quantity: number,
    market: Market,
    status: text // either unpaid, paid, or canceled
    // TODO: change this to enum once it's supported
  }

  // A record of multiple goods bought/to be bought in a single purchase/sale
  // Each Transaction in [transactions] must have the same [buyer] and [status]
  // [total_price] is the sum of all [price]s in [transactions]
  data CompoundTransaction {
    transactions: [Transaction],
    total_price: number
  }

  data Market {}

  /** Widgets **/
  widget BuyGoodButton {
    good: Good,
    buyer: Party,
    quantity: number,
    fraction: number // fraction of good.price each good will be bought for
  }

  widget CreateCompoundTransactionButton {
    compound_transaction: CompoundTransaction,
    submit_ok: boolean
  }

  // Start a CompoundTransaction with a [good] to be bought
  // in a Transaction that has status unpaid
  widget StartCompoundTransactionButton {
    compound_transaction: CompoundTransaction,
    good: Good,
    buyer: Party,
    market: Market,
    quantity: number,
    submit_ok: boolean
  }

  // Add an unpaid Transaction with a [good] to be bought
  // to an existing CompoundTransaction.
  // Changes submit_ok when successful
  widget AddTransactionButton {
    compound_transaction: CompoundTransaction,
    good: Good,
    seller: Party,
    buyer: Party,
    market: Market,
    quantity: number,
    submit_ok: boolean
  }

  widget PayForCompoundTransactionButton {
    compound_transaction: CompoundTransaction,
    submit_ok: boolean
  }

  widget CancelCompoundTransactionButton {
    compound_transaction: CompoundTransaction,
    submit_ok: boolean
  }

  widget ShowCompoundTransaction uses ShowTransaction {
    compound_transaction: CompoundTransaction
  }

  widget BuyGoodQuantity {
    quantity: number
  }

  widget BuyGoodFraction {
    fraction: number // fraction of good.price each good will be bought for
  }

  widget CreateGoodButton {
    seller: Party,
    market: Market,
    good: Good,
    submit_ok: boolean
  }

  widget CreateGoodName {
    good: Good
  }

  widget CreateGoodPrice {
    good: Good
  }

  widget CreateGoodSupply {
    good: Good
  }

  widget EditGoodName {
    good: Good,
    name: string,
    submit_ok: boolean
  }

  widget EditGoodSeller {
    good: Good,
    seller: Party,
    submit_ok: boolean
  }

  // Updates the seller of each transaction and its associated good
  // of [compound_transaction] to [seller]
  // when [submit_ok] is changed
  widget EditCompoundTransactionSeller {
    compound_transaction: CompoundTransaction,
    seller: Party,
    submit_ok: boolean
  }

  widget ShowGood {
    good: Good
  }

  widget ShowMyGoodsForSale uses ShowGood {
    seller: Party,
    market: Market
  }

  widget ShowAffordableGoods uses ShowGood {
    buyer: Party,
    market: Market
  }

  widget ShowUnaffordableGoods uses ShowGood {
    buyer: Party,
    market: Market
  }

  widget ShowAllGoods uses ShowGood {
    market: Market
  }

  widget ShowTransaction {
    transaction: Transaction
  }

  widget ShowAllTransactions uses ShowTransaction {
    market: Market
  }

  widget ShowMyPurchases uses ShowTransaction {
    buyer: Party,
    market: Market
  }

  widget ShowBalance {
    party: Party
  }

  // textbox to enter a number and button to submit
  // Adds [amount] to [party]'s balance
  // when button is pressed or submit_ok is changed
  widget AddAmount {
    party: Party,
    amount: number,
    submit_ok: boolean
  }
}
