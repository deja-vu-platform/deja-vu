Cliche {
  /**
   * Capitalized ("syntactic") rules implicitly skip whitespace characters
   * Lowercase ("lexical") rules don't
   **/
  ClicheDecl = cliche name ClicheUsesDecl? "{" Paragraph* "}"

  RouteDecl = route "\""routeName"\""
  ClicheUsesDecl = uses usedClicheName AsDecl* ("," usedClicheName AsDecl*)*
  AsDecl = as name

  Paragraph
    = DataDecl -- data
    | WidgetDecl -- widget

  DataDecl = data name "{" FieldBody? "}" DataBondDecl?

  WidgetDecl = main? widget name RouteDecl? WidgetUsesDecl? "{"
    FieldBody?
  "}" ReplacesDecl?
  WidgetUsesDecl = uses UsedWidgetDecl ("," UsedWidgetDecl)*
  ReplacesDecl = replaces replaceName "{" ReplaceMap? "}"
  replaceName = (alnum* ".") alnum*
  ReplaceMap = ("_" | alnum)* "=" ("_" | alnum)*
  UsedWidgetDecl = usedWidgetName AsDecl? RouteDecl?

  FieldBody = FieldDecl ("," FieldDecl)*
  FieldDecl = name ":" name FieldBondDecl?

  DataBondDecl = "=" DataBond ("|" DataBond)*
  DataBond = dataBondName ("+" dataBondName)*
  FieldBondDecl = "=" FieldBond ("|" FieldBond)*
  FieldBond = fieldBondName ("+" fieldBondName)*

  fieldBondName
    = (alnum* "." alnum* ".") ("_" | alnum)* -- other
    | (alnum* ".") ("_" | alnum)* -- this
  dataBondName
    = (alnum* ".") alnum* -- other
    | alnum*  -- this
  name = ("_" | alnum)*
  routeName = ("/" | alnum)*
  usedClicheName = alnum* "/" alnum*
  usedWidgetName = (alnum* ".")? alnum*
  comment = singleLineComment | multiLineComment
  singleLineComment = "//" (~eol any)*
  eol = "\r"?"\n"
  multiLineComment = "/*" (~"*/" any)* "*/"

  uses = "uses"
  replaces = "replaces"
  widget = "widget"
  cliche = "cliche"
  data = "data"
  main = "main"
  route = "route"
  as = "as"

  // from the es5 grammar example
  space := whitespace | lineTerminator | comment
  whitespace = "\t"
             | "\x0B"    -- verticalTab
             | "\x0C"    -- formFeed
             | " "
             | "\u00A0"  -- noBreakSpace
             | "\uFEFF"  -- byteOrderMark
             | unicodeSpaceSeparator
  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
}
